// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/falcosecurity/cloud-native-security-hub/pkg/event (interfaces: Handler)

// Package mock_event is a generated GoMock package.
package mock_event

import (
	event "github.com/falcosecurity/cloud-native-security-hub/pkg/event"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Dispatch mocks base method
func (m *MockHandler) Dispatch(arg0 event.Interface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", arg0)
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockHandlerMockRecorder) HandleEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockHandler)(nil).Dispatch), arg0)
}
