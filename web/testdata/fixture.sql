--
-- PostgreSQL database dump
--

-- Dumped from database version 11.5
-- Dumped by pg_dump version 11.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: latest_security_resources; Type: TABLE DATA; Schema: public; Owner: nestor
--

INSERT INTO public.latest_security_resources VALUES (27, '{"id": "admin activities", "icon": "https://www.sudo.ws/sudo/images/sudo-logo-65.png", "kind": "FalcoRules", "name": "Admin activities", "rules": [{"raw": "- rule: Detect su or sudo\n  desc: detect sudo activities\n  condition:\n    spawned_process and proc.name in (sudo, su)\n  output: >\n    Detected sudo or su privilege escalation activity (user=%user.name command=%proc.cmdline)\n  priority: WARN\n  tags: [process]\n- rule: Package Management Launched\n  desc: detect package management launched\n  condition: >\n    spawned_process and user.name != \"_apt\" and package_mgmt_procs and not package_mgmt_ancestor_procs\n  output: >\n    Package management process launched in container (user=%user.name\n    command=%proc.cmdline container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)\n  priority: ERROR\n  tags: [process]\n"}], "vendor": "Sysdig", "version": "1.0.0", "website": "", "keywords": ["usecase"], "description": "# Detecting admin activities Falco Rules\n\nA set of rules to detect admin activities\n\n## Rules\n### Detect su or sudo\nDetects su or sudo privilege escalation activity\n### Package Management Launched\nDetects when a package management process is launched in a container\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for detecting admin activities"}');
INSERT INTO public.latest_security_resources VALUES (28, '{"id": "apache", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Apache_HTTP_server_logo_%282016%29.svg/300px-Apache_HTTP_server_logo_%282016%29.svg.png", "kind": "FalcoRules", "name": "Apache", "rules": [{"raw": "- macro: apache_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_apache\n  condition: container and container.image contains \"apache\"\n\n# Restricting listening ports to selected set\n\n- list: apache_allowed_inbound_ports_tcp\n  items: [80, 443]\n\n- rule: Unexpected inbound tcp connection apache\n  desc: Detect inbound traffic to apache using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (apache_allowed_inbound_ports_tcp) and app_apache\n  output: Inbound network connection to apache on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: apache_allowed_processes\n  items: [\"apache2\", \"basename\", \"grep\", \"app-entrypoint.\", \"node\", \"sleep\", \"dirname\", \"httpd\", \"nami\", \"sh\", \"tini\"]\n\n- rule: Unexpected spawned process apache\n  desc: Detect a process started in a apache container outside of an expected set\n  condition: spawned_process and not proc.name in (apache_allowed_processes) and app_apache\n  output: Unexpected process spawned in apache container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: apache_allowed_file_prefixes_readwrite\n  items: [\"/opt\", \"/tmp\", \"/dev/null\"]\n\n- rule: Unexpected file access readwrite for apache\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (apache_allowed_file_prefixes_readwrite) and app_apache\n  output: Unexpected file accessed readwrite for apache (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Apache", "version": "1.0.0", "website": "", "keywords": ["web"], "description": "# Apache Falco Rules\nThe Apache HTTP Server, colloquially called Apache (/əˈpætʃi/ ə-PATCH-ee),\nis free and open-source cross-platform web server software, released under the\nterms of Apache License 2.0. Apache is developed and maintained by an open community\nof developers under the auspices of the Apache Software Foundation.\n\n## Rules\n\n### Unexpected inbound TCP connection apache\n\nDetects inbound traffic to apache using tcp on a port outside of expected set\n\nAllowed inbound ports:\n\n* 80\n* 443\n\n### Unexpected spawned process apache\n\nDetects a process started in a apache container outside of an expected set\n\nAllowed processes:\n* apache2\n* basename\n* grep\n* app-entrypoint.\n* node\n* sleep\n* dirname\n* httpd\n* nami\n* sh\n* tini\n\n### Unexpected file access readwrite for apache\n\nDetects an attempt to access a file readwrite other than below an expected list of directories\n\nAllowed file prefixes for readwrite:\n* /opt\n* /tmp\n* /dev/null\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Apache HTTP Server"}');
INSERT INTO public.latest_security_resources VALUES (29, '{"id": "consul", "icon": "https://s3.amazonaws.com/hashicorp-marketing-web-assets/brand/Consul_PrimaryLogo_FullColor.BkqqyRBpl.svg", "kind": "FalcoRules", "name": "Consul", "rules": [{"raw": "- macro: consul_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name contains \"consul\"\n- macro: app_consul\n  condition: container and container.image contains \"consul\"\n\n# Restricting listening ports to selected set\n\n- list: consul_allowed_inbound_ports_tcp\n  items: [8300, 8301, 8302, 8500, 8600]\n\n- rule: Unexpected inbound tcp connection consul\n  desc: Detect inbound traffic to consul using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (consul_allowed_inbound_ports_tcp) and app_consul\n  output: Inbound network connection to consul on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: consul_allowed_processes\n  items: [\"/bin/consul\", \"/bin/sh\", \"/proc/self/exe\", \"awk\", \"consul\", \"ping\", \"seq\", \"sleep\"]\n\n- rule: Unexpected spawned process consul\n  desc: Detect a process started in a consul container outside of an expected set\n  condition: spawned_process and not proc.name in (consul_allowed_processes) and app_consul\n  output: Unexpected process spawned in consul container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Retricting paths for readwrite\n\n- list: consul_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/var/lib/consul\"]\n\n- rule: Unexpected file access readwrite for consul\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (consul_allowed_file_prefixes_readwrite) and app_consul\n  output: Unexpected file accessed readwrite for consul (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: consul_allowed_syscalls\n  items: [accept, bind, clone, connect, dup, execve, fork, listen, mkdirat, open, openat, pipe, procexit, recvfrom, recvmsg, sendto, socket, unlinkat]\n\n- rule: Unexpected syscall consul\n  desc: Detect a syscall in a consul container outside of an expected set\n  condition: consul_consider_syscalls and not evt.type in (\"<unknown>\", consul_allowed_syscalls) and app_consul\n  output: Unexpected syscall in consul container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "HashiCorp", "version": "1.0.0", "website": "", "keywords": ["consul"], "description": "# Consul Falco Rules\n\nConsul is a service networking solution to connect and secure services across any runtime platform and public or private cloud\n\n## Rules\n\n### Unexpected inbound tcp connection consul\n\nDetects inbound network connections to consul on unexpected ports\n\nAllowed inbound ports:\n\n* 8300\n* 8301\n* 8302\n* 8500\n* 8600\n\n### Unexpected spawned process consul\n\nDetects an unexpected process spawned in the consul container\n\nAllowed processes:\n\n* consul\n* sh\n* exe\n* awk\n* consul\n* ping\n* seq\n* sleep\n\n### Unexpected system calls in consul container\n\nDetects an unexpected system call executed in consul container\n\nAllowed system calls:\n\n* accept\n* bind\n* clone\n* connect\n* dup\n* execve\n* fork\n* listen\n* mkdirat\n* open\n* openat\n* pipe\n* procexit\n* recvfrom\n* recvmsg\n* sendto\n* socket\n* unlinkat\n\n### Unexpected file access readwrite for apache\n\nDetects an attempt to access a file readwrite other than below an expected list of directories\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /var/lib/consul\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Consul"}');
INSERT INTO public.latest_security_resources VALUES (30, '{"id": "cve-2019-11246", "icon": "https://cve.mitre.org/images/cvebanner.png", "kind": "FalcoRules", "name": "CVE-2019-11246", "rules": [{"raw": "- macro: safe_kubectl_version\n  condition: (jevt.value[/userAgent] startswith \"kubectl/v1.19\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.18\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.17\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.16\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.15\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.14.3\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.14.2\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.13.7\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.13.6\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.12.9\")\n\n# CVE-2019-11246\n# Run kubectl version --client and if it does not say client version 1.12.9, 1.13.6, or 1.14.2 or newer,  you are running a vulnerable version.\n- rule: K8s Vulnerable Kubectl Copy\n  desc: Detect any attempt vulnerable kubectl copy in pod\n  condition: kevt_started and pod_subresource and kcreate and\n             ka.target.subresource = \"exec\" and ka.uri.param[command] = \"tar\" and\n             not safe_kubectl_version\n  output: Vulnerable kubectl copy detected (user=%ka.user.name pod=%ka.target.name ns=%ka.target.namespace action=%ka.target.subresource command=%ka.uri.param[command] userAgent=%jevt.value[/userAgent])\n  priority: WARNING\n  source: k8s_audit\n  tags: [k8s]\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["cve"], "description": "# CVE-2019-11246\n\nThe kubectl cp command allows copying files between containers and the user machine.\nTo copy files from a container, Kubernetes runs tar inside the container to create a tar archive, copies it over the network, and kubectl unpacks it on the user''s machine.\nIf the tar binary in the container is malicious, it could run any code and output unexpected, malicious results.\nAn attacker could use this to write files to any path on the user''s machine when kubectl cp is called, limited only by the system permissions of the local user.\nKubernetes affected versions include versions prior to 1.12.9, versions prior to 1.13.6, versions prior to 1.14.2, and versions 1.1, 1.2, 1.4, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.10, 1.11.\n\nYou can read more info about this CVE:\n\n* [CVE-2019-11246 on Mitre](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11246)\n* [How to detect CVE-2019-11246 using Falco](https://sysdig.com/blog/how-to-detect-kubernetes-vulnerability-cve-2019-11246-using-falco/)\n", "maintainers": [{"link": "https://github.com/tembleking", "name": "Fede Barcelona"}], "shortDescription": "Falco rules for detecting CVE-2019-11246"}');
INSERT INTO public.latest_security_resources VALUES (31, '{"id": "cve-2019-14287", "icon": "https://cve.mitre.org/images/cvebanner.png", "kind": "FalcoRules", "name": "CVE-2019-14287", "rules": [{"raw": "- rule: Sudo Potential bypass of Runas user restrictions (CVE-2019-14287)\n  desc: When sudo is configured to allow a user to run commands as an arbitrary user via the ALL keyword in a Runas specification, it is possible to run commands as root by specifying the user ID -1 or 4294967295. This can be used by a user with sufficient sudo privileges to run commands as root even if the Runas specification explicitly disallows root access as long as the ALL keyword is listed first in the Runas specification\n  condition: >\n    spawned_process and\n    proc.name=\"sudo\" and\n    (proc.cmdline contains \"-u#-1\" or proc.cmdline contains \"-u#4294967295\")\n  output: \"Detect sudo exploit (CVE-2019-14287) (user=%user.name command=%proc.cmdline container=%container.info)\"\n  priority: CRITICAL\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["cve"], "description": "# CVE-2019-14287\n\nThe issue exists in the way sudo has implemented running commands with an arbitrary user ID in versions earlier than 1.8.28. The CVSS v3 score is 7.8, so we are talking about a high severity vulnerability, easy to exploit, although the attack vector is local and requires a non-default configuration.\n\nInvoking sudo with -u#-1 or -u#4294967295 specified in the sudo command, the malicious user can run arbitrary commands as root, as long as the sudoers meets the previously described conditions.\n\nIn addition to that, the malicious sudo operation will not log correctly through the syslog facility. It supposed to be logged as root, however, it turned out to be -1 or 4294967295.\n\nYou can read more info about this CVE:\n\n* [CVE-2019-14287 on Mitre](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-14287)\n* [How to detect CVE-2019-14287 using Falco](https://sysdig.com/blog/detecting-cve-2019-14287/)\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}], "shortDescription": "Falco rules for detecting CVE-2019-14287"}');
INSERT INTO public.latest_security_resources VALUES (32, '{"id": "cve-2019-5736", "icon": "https://cve.mitre.org/images/cvebanner.png", "kind": "FalcoRules", "name": "CVE-2019-5736", "rules": [{"raw": "- list: docker_binaries\n  items: [dockerd, containerd-shim, \"runc:[1:CHILD]\"]\n\n- macro: docker_procs\n  condition: proc.name in (docker_binaries)\n\n- rule: Modify container entrypoint (CVE-2019-5736)\n  desc: Detect file write activities on container entrypoint symlink (/proc/self/exe)\n  condition: >\n    open_write and (fd.name=/proc/self/exe or fd.name startswith /proc/self/fd/) and not docker_procs and container\n  output: >\n    %fd.name is open to write by process (%proc.name, %proc.exeline)\n  priority: WARNING\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["cve"], "description": "# CVE-2019-5736\n\nrunC is the underlying container runtime beneath infrastructure such as Docker, CRI-O, containerd, Kubernetes and others. This new vulnerability allows a compromised container to overwrite the host runC binary and gain root-level execution and underlying file access. As a result, an attacker can run any root level command within a container when:\n* Spinning up a new container based on the attacker’s image.\n* Attaching (docker exec) into an existing container which the attacker had previous write access to.\n\nYou can read more info about this CVE:\n\n* [CVE-2019-5736 on Mitre](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5736)\n* [Detecting exploits of CVE-2019-5736: runc container breakout](https://sysdig.com/blog/cve-2019-5736-runc-container-breakout/)\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for detecting CVE-2019-5736"}');
INSERT INTO public.latest_security_resources VALUES (33, '{"id": "elasticsearch", "icon": "https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt05047fdbe3b9c333/5c11ec1f3312ce2e785d9c30/logo-elastic-elasticsearch-lt.svg", "kind": "FalcoRules", "name": "ElasticSearch", "rules": [{"raw": "- macro: elasticsearch_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_elasticsearch\n  condition: container and container.image contains \"elasticsearch\"\n\n# Restricting listening ports to selected set\n\n- list: elasticsearch_allowed_inbound_ports_tcp\n  items: [37125, 37385, 40689, 41503, 44173, 9200, 9300]\n\n- rule: Unexpected inbound tcp connection elasticsearch\n  desc: Detect inbound traffic to elasticsearch using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (elasticsearch_allowed_inbound_ports_tcp) and app_elasticsearch\n  output: Inbound network connection to elasticsearch on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: elasticsearch_allowed_processes\n  items: [\"/bin/bash\", \"/bin/sh\", \"/proc/self/exe\", \"/sbin/ldconfig\", \"/usr/lib/jvm/jre-1.8.0-openjdk/bin/java\", \"/usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_64/bin/controller\", \"chown\", \"controller\", \"cut\", \"dirname\", \"egrep\", \"env\", \"grep\", \"hostname\", \"java\", \"ldconfig\", \"tr\", \"app-entrypoint.\", \"basename\", \"getent\", \"groupadd\", \"nami\", \"node\", \"sysctl\", \"useradd\", \"sleep\", \"elasticsearch\", \"elasticsearch-p\", \"id\", \"ldconfig.real\", \"mktemp\", \"ps\", \"sh\", \"su\", \"tini\"]\n\n- rule: Unexpected spawned process elasticsearch\n  desc: Detect a process started in a elasticsearch container outside of an expected set\n  condition: spawned_process and not proc.name in (elasticsearch_allowed_processes) and app_elasticsearch\n  output: Unexpected process spawned in elasticsearch container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: elasticsearch_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\", \"/usr/share/elasticsearch\", \"/etc\", \"/opt\"]\n\n- rule: Unexpected file access readwrite for elasticsearch\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (elasticsearch_allowed_file_prefixes_readwrite) and app_elasticsearch\n  output: Unexpected file accessed readwrite for elasticsearch (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Elastic", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# ElasticSearch Falco Rules\nElasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected.\n\n## Rules\n\n### Unexpected inbound tcp connection elasticsearch\n\nDetects inbound network connections to elasticsearch on unexpected ports\n\nAllowed ports:\n\n* 37125\n* 37385\n* 40689\n* 41503\n* 44173\n* 9200\n* 9300\n\n### Unexpected spawned process elasticsearch\n\nDetects an unexpected process spawned in the elasticsearch container\n\nAllowed processes:\n\n* /bin/bash\n* /bin/sh\n* /proc/self/exe\n* /sbin/ldconfig\n* /usr/lib/jvm/jre-1.8.0-openjdk/bin/java\n* /usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_64/bin/controller\"\n* chown\n* controller\n* cut\n* dirname\n* egrep\n* env\n* grep\n* hostname\n* java\n* ldconfig\n* tr\n* app-entrypoint\n* basename\n* getent\n* groupadd\n* nami\n* node\n* sysctl\n* useradd\n* sleep\n* elasticsearch\n* elasticsearch-p\n* id\n* ldconfig.real\n* mktemp\n* ps\n* sh\n* su\n* tini\n\n### Unexpected file access readwrite for elasticsearch\n\nDetects an unexpected file accessed in readwrite mode for elasticsearch\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /tmp\n* /usr/share/elasticsearch\n* /etc\n* /opt\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing ElasticSearch"}');
INSERT INTO public.latest_security_resources VALUES (34, '{"id": "etcd", "icon": "https://raw.githubusercontent.com/cncf/artwork/master/projects/etcd/horizontal/color/etcd-horizontal-color.png", "kind": "FalcoRules", "name": "etcd", "rules": [{"raw": "- macro: etcd_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_etcd\n  condition: container and container.image contains \"k8s_etcd\"\n\n# Not considering all inbound networking suspect\n\n- list: etcd_outbound_processes\n  items:\n  - etcd\n\n- rule: Unauthorized process opened an outbound connection (etcd)\n  desc: A etcd process tried to open an outbound connection and is not whitelisted\n  condition: outbound and not proc.name in (etcd_outbound_processes) and app_etcd\n  output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline\n    connection=%fd.name)\n  priority: WARNING\n\n# Restricting listening ports to selected set\n\n- list: etcd_allowed_inbound_ports_tcp\n  items: [2380, 4001, 7001]\n\n- rule: Unexpected inbound tcp connection etcd\n  desc: Detect inbound traffic to etcd using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (etcd_allowed_inbound_ports_tcp) and app_etcd\n  output: Inbound network connection to etcd on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: etcd_allowed_processes\n  items: [\"/usr/local/bin/etcd\"]\n\n- rule: Unexpected spawned process etcd\n  desc: Detect a process started in a etcd container outside of an expected set\n  condition: spawned_process and not proc.name in (etcd_allowed_processes) and app_etcd\n  output: Unexpected process spawned in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: etcd_allowed_file_prefixes_readonly\n  items: [\"/proc/self\", \"/var/etcd/data/member\"]\n\n- rule: Unexpected file access readonly for etcd\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (etcd_allowed_file_prefixes_readonly) and app_etcd\n  output: Unexpected file accessed readonly for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: etcd_allowed_file_prefixes_readwrite\n  items: [\"/var/etcd/data/member\"]\n\n- rule: Unexpected file access readwrite for etcd\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (etcd_allowed_file_prefixes_readwrite) and app_etcd\n  output: Unexpected file accessed readwrite for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: etcd_allowed_syscalls\n  items: [accept, openat, renameat, unlinkat]\n\n- rule: Unexpected syscall etcd\n  desc: Detect a syscall in a etcd container outside of an expected set\n  condition: etcd_consider_syscalls and not evt.type in (\"<unknown>\", etcd_allowed_syscalls) and app_etcd\n  output: Unexpected syscall in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "CoreOS", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# etcd Falco Rules\n\nA distributed, reliable key-value store for the most critical data of a distributed system\n\n## Rules\n\n### Unauthorized process opened an outbund connection\n\nDetects if an unauthorized process is trying to open an outbound connection\n\nAllowed processes:\n\n* etcd\n\n### Unauthorized inbound tcp connection etcd\n\nDetects inbound network connections to etcd on unexpected ports\n\nAllowed inbound ports:\n\n* 2380\n* 4001\n* 7001\n\n### Unexpected spawned process etcd\n\nDetects an unexpected process spawned in the etcd container\n\nAllowed processes:\n\n* /usr/local/bin/etcd\n\n### Unexpected file read by etcd\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /proc/self\n* /var/etcd/data/member\n\n### Unexpected file readwrite by etcd\n\nDetects an attempt to access a file readonly other than below an expected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/etcd/data/member\n\n### Unexpected system calls in etcd container\n\nDetects an unexpected system call executed in etcd container\n\nAllowed system calls:\n\n* accept\n* openat\n* renameat\n* unlinkat\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing etcd"}');
INSERT INTO public.latest_security_resources VALUES (35, '{"id": "file integrity monitoring", "icon": "https://upload.wikimedia.org/wikipedia/commons/6/65/GNOME_Files_icon_2019.svg", "kind": "FalcoRules", "name": "File integrity monitoring", "rules": [{"raw": "- rule: Detect New File\n  desc: detect new file created\n  condition: >\n    evt.type = chmod or evt.type = fchmod\n  output: >\n    File below a known directory opened for writing (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: ERROR\n  tags: [filesystem]\n- rule: Detect New Directory\n  desc: detect new directory created\n  condition: >\n    mkdir\n  output: >\n    File below a known directory opened for writing (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: ERROR\n  tags: [filesystem]\n- rule: Detect File Permission or Ownership Change\n  desc: detect file permission/ownership change\n  condition: >\n    spawned_process and proc.name in (chmod, chown) and proc.args contains \"/tmp/\"\n  output: >\n    File below a known directory has permission or ownership change (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: WARN\n  tags: [filesystem]\n- rule: Detect Directory Change\n  desc: detect directories change\n  condition: >\n    spawned_process and proc.name in (mkdir, rmdir, mvdir, mv)\n  output: >\n    Directory Change in Filesystem (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: WARN\n  tags: [filesystem]\n- rule: Kernel Module Modification\n  desc: detect kernel module change\n  condition: >\n    spawned_process and proc.name in (insmod, modprobe)\n  output: >\n    Kernel Module Change (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)\n  priority: WARN\n  tags: [process]\n- rule: Node Created in Filesystem\n  desc: detect node created in filesystem\n  condition: >\n    spawned_process and proc.name = mknod\n  output: >\n    Node Creation in Filesystem (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)\n  priority: WARN\n  tags: [filesystem]\n- rule: Listen on New Port\n  desc: Detection a new port is listening\n  condition:\n    evt.type = listen\n  output: >\n    A new port is open to listen (port=%fd.sport ip=%fd.sip)\n  priority: WARN\n  tags: [network]\n"}], "vendor": "Sysdig", "version": "1.0.0", "website": "", "keywords": ["FIM"], "description": "# FIM - File integrity monitoring Falco Rules\n\nA set of rules to detect changes in your filesystem\n\n## Rules\n### Detect New File\nDetects when a new file is created\n### Detect New Directory\nDetects when a new directory is created\n### Detect File Permission or Ownership Change\nDetects file permissions or ownership change\n### Detect Directory Change\nDetects directory changes includir mkdir, rmdir, mvdir, mv\n### Kernel Module Modification\nDetects kernel modules changes via modprobe or insmod\n### Node Created in Filesystem\nDetects a node created via mknod\n### Listen on a New Port\nDetects a new port is listening\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for file integrity monitoring"}');
INSERT INTO public.latest_security_resources VALUES (36, '{"id": "fluentd", "icon": "https://raw.githubusercontent.com/fluent/fluentd-docs/master/public/logo/Fluentd_square.png", "kind": "FalcoRules", "name": "FluentD", "rules": [{"raw": "- macro: fluentd_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_fluentd\n  condition: container and container.image contains \"fluentd\"\n\n# Restricting listening ports to selected set\n\n- list: fluentd_allowed_inbound_ports_tcp\n  items: [31337]\n\n- rule: Unexpected inbound tcp connection fluentd\n  desc: Detect inbound traffic to fluentd using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (fluentd_allowed_inbound_ports_tcp) and app_fluentd\n  output: Inbound network connection to fluentd on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: fluentd_allowed_processes\n  items: [\"/bin/sh\", \"/proc/self/exe\", \"/usr/bin/ruby2.1\", \"date\", \"expr\", \"fluentd\", \"grep\", \"run.sh\", \"sed\", \"stat\"]\n\n- rule: Unexpected spawned process fluentd\n  desc: Detect a process started in a fluentd container outside of an expected set\n  condition: spawned_process and not proc.name in (fluentd_allowed_processes) and app_fluentd\n  output: Unexpected process spawned in fluentd container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: fluentd_allowed_file_prefixes_readwrite\n  items: [\"/var/log\"]\n\n- rule: Unexpected file access readwrite for fluentd\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (fluentd_allowed_file_prefixes_readwrite) and app_fluentd\n  output: Unexpected file accessed readwrite for fluentd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Treasure Data", "version": "1.0.0", "website": "", "keywords": ["logging"], "description": "# FluentD Falco Rules\n\nA distributed, reliable key-value store for the most critical data of a distributed system\n\n## Rules\n\n### Unauthorized inbound tcp connection fluentd\n\nDetects inbound network connections to fluentd on unexpected ports\n\nAllowed inbound ports:\n\n* 31337\n\n### Unexpected spawned process fluentd\n\nDetects an unexpected process spawned in the fluentd container\n\nAllowed processes:\n\n* /bin/sh\n* /proc/self/exe\n* /usr/bin/ruby2.1\n* date\n* expr\n* fluentd\n* grep\n* run.sh\n* sed\n* stat\n\n### Unexpected file read or written by fluentd\n\nDetects an attempt to access a file readwrite other than below an expected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/log\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing FluentD"}');
INSERT INTO public.latest_security_resources VALUES (37, '{"id": "gke", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/Google_Cloud_Logo.svg/300px-Google_Cloud_Logo.svg.png", "kind": "FalcoRules", "name": "GKE", "rules": [{"raw": "#\n# Auto-generated set of falco rules for defaultbackend containers\n# Generated at 2018-05-23 14:59:00 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: defaultbackend_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"defaultbackend\"\n- macro: app_defaultbackend\n  condition: container and container.image contains \"defaultbackend\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: defaultbackend_allowed_inbound_ports_tcp\n  items: [8080]\n\n- rule: Unexpected inbound tcp connection defaultbackend\n  desc: Detect inbound traffic to defaultbackend using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (defaultbackend_allowed_inbound_ports_tcp) and app_defaultbackend\n  output: Inbound network connection to defaultbackend on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: defaultbackend_allowed_processes\n  items: [\"/server\"]\n\n- rule: Unexpected spawned process defaultbackend\n  desc: Detect a process started in a defaultbackend container outside of an expected set\n  condition: spawned_process and not proc.name in (defaultbackend_allowed_processes) and app_defaultbackend\n  output: Unexpected process spawned in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n# Restricting syscalls to selected set\n\n- list: defaultbackend_allowed_syscalls\n  items: [accept]\n\n- rule: Unexpected syscall defaultbackend\n  desc: Detect a syscall in a defaultbackend container outside of an expected set\n  condition: defaultbackend_consider_syscalls and not evt.type in (\"<unknown>\", defaultbackend_allowed_syscalls) and app_defaultbackend\n  output: Unexpected syscall in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}, {"raw": "#\n# Auto-generated set of falco rules for event_exporter containers\n# Generated at 2018-05-23 15:00:05 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: event_exporter_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"event_exporter\"\n- macro: app_event_exporter\n  condition: container and container.image startswith \"event_exporter\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: event_exporter_allowed_inbound_ports_tcp\n  items: [80]\n\n- rule: Unexpected inbound tcp connection event_exporter\n  desc: Detect inbound traffic to event_exporter using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (event_exporter_allowed_inbound_ports_tcp) and app_event_exporter\n  output: Inbound network connection to event_exporter on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: event_exporter_allowed_processes\n  items: [\"/event-exporter\"]\n\n- rule: Unexpected spawned process event_exporter\n  desc: Detect a process started in a event_exporter container outside of an expected set\n  condition: spawned_process and not proc.name in (event_exporter_allowed_processes) and app_event_exporter\n  output: Unexpected process spawned in event_exporter container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: event_exporter_allowed_file_prefixes_readonly\n  items: [\"/proc\"]\n\n- rule: Unexpected file access readonly for event_exporter\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (event_exporter_allowed_file_prefixes_readonly) and app_event_exporter\n  output: Unexpected file accessed readonly for event_exporter (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for hyperkube containers\n# Generated at 2018-05-10 04:57:50 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: hyperkube_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"hyperkube\"\n- macro: app_hyperkube\n  condition: container and container.image contains \"hyperkube\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: hyperkube_allowed_inbound_ports_tcp\n  items: [10248, 10249, 10250, 10255, 4194, 443, 8080]\n\n- rule: Unexpected inbound tcp connection hyperkube\n  desc: Detect inbound traffic to hyperkube using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (hyperkube_allowed_inbound_ports_tcp) and app_hyperkube\n  output: Inbound network connection to hyperkube on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: hyperkube_allowed_processes\n  items: [\"/bin/bash\", \"/bin/findmnt\", \"/hyperkube\", \"findmnt\", \"iptables\", \"iptables-restor\", \"iptables-restore\", \"iptables-save\", \"journalctl\", \"nsenter\", \"sleep\"]\n\n- rule: Unexpected spawned process hyperkube\n  desc: Detect a process started in a hyperkube container outside of an expected set\n  condition: spawned_process and not proc.name in (hyperkube_allowed_processes) and app_hyperkube\n  output: Unexpected process spawned in hyperkube container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: hyperkube_allowed_file_prefixes_readonly\n  items: [\"/\"]\n\n- rule: Unexpected file access readonly for hyperkube\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readonly) and app_hyperkube\n  output: Unexpected file accessed readonly for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: hyperkube_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/proc\", \"/var/lib/kubelet/pods\"]\n\n- rule: Unexpected file access readwrite for hyperkube\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readwrite) and app_hyperkube\n  output: Unexpected file accessed readwrite for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for k8s_dns containers\n# Generated at 2018-05-23 15:00:05 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: k8s_dns_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"k8s_dns\"\n- macro: app_k8s_dns\n  condition: container and container.image contains \"k8s_dns\"\n\n# Considering any inbound network connection suspect\n- rule: Unexpected inbound connection k8s_dns\n  desc: Detect any inbound connection arriving at k8s_dns\n  condition: inbound and evt.rawres >= 0 and app_k8s_dns\n  output: Unexpected inbound connection arriving at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Considering any outbound networking suspect\n- rule: Unexpected outbound connection k8s_dns\n  desc: Detect any outbound connection originating from k8s_dns\n  condition: outbound and app_k8s_dns\n  output: Unexpected outbound connection originating at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting listening ports to selected set\n\n- list: k8s_dns_allowed_inbound_ports_tcp\n  items: [53]\n\n- rule: Unexpected inbound tcp connection k8s_dns\n  desc: Detect inbound traffic to k8s_dns using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_tcp) and app_k8s_dns\n  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n- list: k8s_dns_allowed_inbound_ports_udp\n  items: [53]\n\n- rule: Unexpected inbound udp connection k8s_dns\n  desc: Detect inbound traffic to k8s_dns using udp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_udp) and app_k8s_dns\n  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: k8s_dns_allowed_processes\n  items: [\"/dnsmasq-nanny\", \"/usr/sbin/dnsmasq\", \"dnsmasq\"]\n\n- rule: Unexpected spawned process k8s_dns\n  desc: Detect a process started in a k8s_dns container outside of an expected set\n  condition: spawned_process and not proc.name in (k8s_dns_allowed_processes) and app_k8s_dns\n  output: Unexpected process spawned in k8s_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: k8s_dns_allowed_file_prefixes_readonly\n  items: [\"/etc/k8s/dns\"]\n\n- rule: Unexpected file access readonly for k8s_dns\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readonly) and app_k8s_dns\n  output: Unexpected file accessed readonly for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: k8s_dns_allowed_file_prefixes_readwrite\n  items: [\"/dev\"]\n\n- rule: Unexpected file access readwrite for k8s_dns\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readwrite) and app_k8s_dns\n  output: Unexpected file accessed readwrite for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["kubernetes", "google"], "description": "# GKE Falco Rules\nGoogle Kubernetes Engine (GKE) is a managed, production-ready environment for deploying containerized applications. It brings our latest innovations in developer productivity, resource efficiency, automated operations, and open source flexibility to accelerate your time to market.\n\nLaunched in 2015, Kubernetes Engine builds on Google''s experience of running services like Gmail and YouTube in containers for over 12 years. Kubernetes Engine allows you to get up and running with Kubernetes in no time, by completely eliminating the need to install, manage, and operate your own Kubernetes clusters.\n\n## Rules\n\n### Unexpected inbound TCP connections\n\nDetects inbound traffic to GKE components on a port outside of expected set\n\nAllowed inbound ports:\n* 8080 TCP (defaultbackend container)\n* 80 TCP (event_exporter container)\n* 10248, 10249, 10250, 10255, 4194, 443, 8080 TCP (hyperkube container)\n* 53 TCP/UDP (k8s_dns container)\n\n### Unexpected spawned processes\n\nDetects a process started in GKE cluster outside of an expected set\n\nAllowed processes:\n* /server (defaultbackend container)\n* /event-exporter (event_exporter container)\n* For hyperkube container:\n  * /bin/bash\n  * /bin/findmnt\n  * /hyperkube\n  * findmnt\n  * iptables\n  * iptables-restore\n  * iptables-save\n  * journalctl\n  * nsenter\n  * sleep\n* For k8s_dns:\n  * /dnsmasq-nanny\n  * /usr/sbin/dnsmasq\n  * dnsmasq\n\n### Unexpected file access\n\nDetects an attempt to access a file other than an expected list of directories\n\n* /event-exporter (event_exporter container)\n* Read-write outside /dev, /proc, /var/lib/kubelet/pods (hyperkube)\n* Read outside /etc/k8s/dns or write outside /dev (k8s_dns)\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/airadier", "name": "airadier"}], "shortDescription": "Falco rules for securing Google Kubernetes Engine"}');
INSERT INTO public.latest_security_resources VALUES (38, '{"id": "haproxy", "icon": "https://www.cncf.io/wp-content/uploads/2018/04/HAProxy-logo.png", "kind": "FalcoRules", "name": "HAProxy", "rules": [{"raw": "- macro: haproxy_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_haproxy\n  condition: container and container.image contains \"haproxy\"\n\n# Restricting listening ports to selected set\n\n- list: haproxy_allowed_inbound_ports_tcp\n  items: [80, 443, 1936]\n\n- rule: Unexpected inbound tcp connection haproxy\n  desc: Detect inbound traffic to haproxy using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (haproxy_allowed_inbound_ports_tcp) and app_haproxy\n  output: Inbound network connection to haproxy on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: haproxy_allowed_processes\n  items: [\"haproxy\"]\n\n- rule: Unexpected spawned process haproxy\n  desc: Detect a process started in a haproxy container outside of an expected set\n  condition: spawned_process and not proc.name in (haproxy_allowed_processes) and app_haproxy\n  output: Unexpected process spawned in haproxy container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: haproxy_allowed_file_prefixes_readonly\n  items: [\"/etc\", \"/lib/x86_64-linux-gnu\", \"/proc/sys/kernel\", \"/sys/devices/system/cpu\", \"/usr/lib/x86_64-linux-gnu\"]\n\n- rule: Unexpected file access readonly for haproxy\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (haproxy_allowed_file_prefixes_readonly) and app_haproxy\n  output: Unexpected file accessed readonly for haproxy (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: haproxy_allowed_file_prefixes_readwrite\n  items: [\"/var/log/haproxy\", \"/var/run\"]\n# Remember to add your haproxy cache path\n\n- rule: Unexpected file access readwrite for haproxy\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (haproxy_allowed_file_prefixes_readwrite) and app_haproxy\n  output: Unexpected file accessed readwrite for haproxy (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "HAProxy", "version": "1.0.0", "website": "", "keywords": ["loadbalancer"], "description": "# HAProxy Falco Rules\n\nHAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world''s most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms.\n\n## Rules\n\n### Unauthorized inbound tcp connection haproxy\n\nDetects inbound network connections to haproxy on unexpected ports\n\nAllowed ports:\n\n* 80\n* 443\n* 1936\n\n### Unexpected spawned process haproxy\n\nDetects an unexpected process spawned in the haproxy container\n\nAllowed processes:\n\n* haproxy\n\n### Unexpected file read by haproxy\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /etc\n* /lib/x86_64-linux-gnu\n* /proc/sys/kernel\n* /sys/devices/system/cpu\n* /usr/lib/x86_64-linux-gnu\n\n### Unexpected file written by haproxy\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/log/haproxy\n* /var/run\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing HAProxy"}');
INSERT INTO public.latest_security_resources VALUES (39, '{"id": "kubernetes", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/300px-Kubernetes_logo_without_workmark.svg.png", "kind": "FalcoRules", "name": "Kubernetes", "rules": [{"raw": "#\n# Auto-generated set of falco rules for kube_apiserver containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_apiserver_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_apiserver\"\n- macro: app_kube_apiserver\n  condition: container and container.image contains \"kube-apiserver\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_apiserver_allowed_inbound_ports_tcp\n  items: [6443]\n\n- rule: Unexpected inbound tcp connection kube_apiserver\n  desc: Detect inbound traffic to kube_apiserver using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_apiserver_allowed_inbound_ports_tcp) and app_kube_apiserver\n  output: Inbound network connection to kube_apiserver on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_apiserver_allowed_processes\n  items: [\"kube-apiserver\"]\n\n- rule: Unexpected spawned process kube_apiserver\n  desc: Detect a process started in a kube_apiserver container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_apiserver_allowed_processes) and app_kube_apiserver\n  output: Unexpected process spawned in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n# Restricting syscalls to selected set\n\n- list: kube_apiserver_allowed_syscalls\n  items: [accept, connect, socket]\n\n- rule: Unexpected syscall kube_apiserver\n  desc: Detect a syscall in a kube_apiserver container outside of an expected set\n  condition: kube_apiserver_consider_syscalls and not evt.type in (\"<unknown>\", kube_apiserver_allowed_syscalls) and app_kube_apiserver\n  output: Unexpected syscall in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_controller containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_controller_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_controller\"\n- macro: app_kube_controller\n  condition: container and container.image contains \"kube-controller\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_controller_allowed_inbound_ports_tcp\n  items: [10252]\n\n- rule: Unexpected inbound tcp connection kube_controller\n  desc: Detect inbound traffic to kube_controller using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_controller_allowed_inbound_ports_tcp) and app_kube_controller\n  output: Inbound network connection to kube_controller on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_controller_allowed_processes\n  items: [\"kube-controller-manager\"]\n\n- rule: Unexpected spawned process kube_controller\n  desc: Detect a process started in a kube_controller container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_controller_allowed_processes) and app_kube_controller\n  output: Unexpected process spawned in kube_controller container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_dashboard containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_dashboard_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_dashboard\"\n- macro: app_kube_dashboard\n  condition: container and container.image contains \"kube-dashboard\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_dashboard_allowed_inbound_ports_tcp\n  items: [8443]\n\n- rule: Unexpected inbound tcp connection kube_dashboard\n  desc: Detect inbound traffic to kube_dashboard using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dashboard_allowed_inbound_ports_tcp) and app_kube_dashboard\n  output: Inbound network connection to kube_dashboard on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_dashboard_allowed_processes\n  items: [\"/dashboard\"]\n\n- rule: Unexpected spawned process kube_dashboard\n  desc: Detect a process started in a kube_dashboard container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_dashboard_allowed_processes) and app_kube_dashboard\n  output: Unexpected process spawned in kube_dashboard container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: kube_dashboard_allowed_file_prefixes_readonly\n  items: [\"/public\"]\n\n- rule: Unexpected file access readonly for kube_dashboard\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (kube_dashboard_allowed_file_prefixes_readonly) and app_kube_dashboard\n  output: Unexpected file accessed readonly for kube_dashboard (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_dns containers\n# Generated at 2018-05-23 08:29:54 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_dns_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_dns\"\n- macro: app_kube_dns\n  condition: container and container.image contains \"kube-dns\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_dns_allowed_inbound_ports_tcp\n  items: [10053, 10055, 8081]\n\n- rule: Unexpected inbound tcp connection kube_dns\n  desc: Detect inbound traffic to kube_dns using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dns_allowed_inbound_ports_tcp) and app_kube_dns\n  output: Inbound network connection to kube_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_dns_allowed_processes\n  items: [\"/kube-dns\"]\n\n- rule: Unexpected spawned process kube_dns\n  desc: Detect a process started in a kube_dns container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_dns_allowed_processes) and app_kube_dns\n  output: Unexpected process spawned in kube_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_scheduler containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_scheduler_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_scheduler\"\n- macro: app_kube_scheduler\n  condition: container and container.image contains \"kube-scheduler\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_scheduler_allowed_inbound_ports_tcp\n  items: [10251]\n\n- rule: Unexpected inbound tcp connection kube_scheduler\n  desc: Detect inbound traffic to kube_scheduler using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_scheduler_allowed_inbound_ports_tcp) and app_kube_scheduler\n  output: Inbound network connection to kube_scheduler on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_scheduler_allowed_processes\n  items: [\"kube-scheduler\"]\n\n- rule: Unexpected spawned process kube_scheduler\n  desc: Detect a process started in a kube_scheduler container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_scheduler_allowed_processes) and app_kube_scheduler\n  output: Unexpected process spawned in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n# Restricting syscalls to selected set\n\n- list: kube_scheduler_allowed_syscalls\n  items: [accept]\n\n- rule: Unexpected syscall kube_scheduler\n  desc: Detect a syscall in a kube_scheduler container outside of an expected set\n  condition: kube_scheduler_consider_syscalls and not evt.type in (\"<unknown>\", kube_scheduler_allowed_syscalls) and app_kube_scheduler\n  output: Unexpected syscall in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "Kubernetes", "version": "1.0.0", "website": "", "keywords": ["kubernetes"], "description": "# Kubernetes Falco Rules\nKubernetes (commonly stylized as k8s) is an open-source container-orchestration system for automating application deployment, scaling, and management.\n\n## Rules\n\n### Unexpected inbound TCP connections\n\nDetects inbound traffic to Kubernetes components using tcp on a port outside of expected set\n\nAllowed inbound ports:\n* 6443 (kube-apiserver container)\n* 10252 (kube-controller container)\n* 8443 (kube-dashboard container)\n* 10053, 10055, 8081 (kube-dns container)\n* 10251 (kube-scheduler container)\n\n### Unexpected spawned processes\n\nDetects a process started in a kubernetes cluster outside of an expected set\n\nAllowed processes:\n* kube-apiserver (for kube-apiserver container)\n* kube-controller-manager (for kube-controller container)\n* /dashboard (kube-dashboard container)\n* /kube-dns (kube-dns container)\n* kube-scheduler (kube-scheduler container)\n\n### Unexpected file access readonly\n\nDetects an attempt to access a file readonly other than below an expected list of directories\n\nAllowed file prefixes for readonly:\n* /public\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/airadier", "name": "airadier"}], "shortDescription": "Falco rules for securing Kubernetes clusters"}');
INSERT INTO public.latest_security_resources VALUES (40, '{"id": "mongodb", "icon": "https://upload.wikimedia.org/wikipedia/en/thumb/4/45/MongoDB-Logo.svg/2560px-MongoDB-Logo.svg.png", "kind": "FalcoRules", "name": "MongoDB", "rules": [{"raw": "- macro: mongo_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_mongo\n  condition: container and container.image contains \"mongo\"\n\n# Restricting listening ports to selected set\n\n- list: mongo_allowed_inbound_ports_tcp\n  items: [27017]\n\n- rule: Unexpected inbound tcp connection mongo\n  desc: Detect inbound traffic to mongo using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (mongo_allowed_inbound_ports_tcp) and app_mongo and fd.sockfamily = ip\n  output: Inbound network connection to mongo on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: mongo_allowed_processes\n  items: [\"mongod\", \"mongo\", \"ftdc\", \"WTCheck.tThread\" ,\"app-entrypoint.\", \"basename\", \"dirname\", \"getent\", \"gosu\", \"grep\", \"groupadd\", \"nami\", \"node\", \"run.sh\", \"sed\", \"sh\", \"sleep\", \"tini\", \"useradd\", \"which\"]\n\n- rule: Unexpected spawned process mongo\n  desc: Detect a process started in a mongo container outside of an expected set\n  condition: spawned_process and not proc.name in (mongo_allowed_processes) and app_mongo\n  output: Unexpected process spawned in mongo container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: mongo_allowed_file_prefixes_readwrite\n  items: [\"/data/db\", \"/etc\", \"/opt\", \"/tmp\", \"/root/.nami\"]\n\n- rule: Unexpected file access readwrite for mongo\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (mongo_allowed_file_prefixes_readwrite) and app_mongo\n  output: Unexpected file accessed readwrite for mongo (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "MongoDB", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# MongoDB Falco Rules\nMongoDB is a free and open-source cross-platform document-oriented database program.\nClassified as a NoSQL database program, MongoDB uses JSON-like documents with schemas.\nMongoDB is developed by MongoDB Inc., and is published under a combination of the GNU\nAffero General Public License and the Apache\n\n## Rules\n\n### Unexpected inbound tcp connection mongo\n\nDetects an inbound network connection to mongo on an unexpected port\n\nAllowed ports:\n\n* 27017\n\n### Unexpected spawned process mongo\n\nDetects an unexpected process spawned in the mongo container\n\nAllowed processes:\n\n* mongod\n* mongo\n* ftdc\n* WTCheck.tThread\n* app-entrypoint\n* basename\n* dirname\n* getent\n* gosu\n* grep\n* groupadd\n* nami\n* node\n* run.sh\n* sed\n* sh\n* sleep\n* tini\n* useradd\n* which\n\n### Unexpected file access readwrite for mongo\n\nDetects an unexpected file accessed in readwrite mode for mongo\n\nAllowed file prefixes for readwrite:\n\n* /data/db\n* /etc\n* /opt\n* /tmp\n* /root/.nami\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing MongoDB"}');
INSERT INTO public.latest_security_resources VALUES (41, '{"id": "nginx", "icon": "https://www.nginx.com/wp-content/themes/nginx-theme/assets/img/logo.png", "kind": "FalcoRules", "name": "Nginx", "rules": [{"raw": "- macro: nginx_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_nginx\n  condition: container and container.image contains \"nginx\"\n\n# Any outbound traffic raises a WARNING\n\n- rule: Unauthorized process opened an outbound connection (nginx)\n  desc: A nginx process tried to open an outbound connection and is not whitelisted\n  condition: outbound and evt.rawres >= 0 and app_nginx\n  output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline\n    connection=%fd.name)\n  priority: WARNING\n\n\n# Restricting listening ports to selected set\n\n- list: nginx_allowed_inbound_ports_tcp\n  items: [80, 443, 8080, 8443]\n\n- rule: Unexpected inbound tcp connection nginx\n  desc: Detect inbound traffic to nginx using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (nginx_allowed_inbound_ports_tcp) and app_nginx\n  output: Inbound network connection to nginx on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: nginx_allowed_processes\n  items: [\"nginx\", \"app-entrypoint.\", \"basename\", \"dirname\", \"grep\", \"nami\", \"node\", \"tini\"]\n\n- rule: Unexpected spawned process nginx\n  desc: Detect a process started in a nginx container outside of an expected set\n  condition: spawned_process and not proc.name in (nginx_allowed_processes) and app_nginx\n  output: Unexpected process spawned in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: nginx_allowed_file_prefixes_readwrite\n  items: [\"/var/log/nginx\", \"/var/run\"]\n# Remember to add your nginx cache path\n\n- rule: Unexpected file access readwrite for nginx\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (nginx_allowed_file_prefixes_readwrite) and app_nginx\n  output: Unexpected file accessed readwrite for nginx (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: nginx_allowed_syscalls\n  items: [accept, bind, clone, connect, dup, listen, mkdir, open, recvfrom, recvmsg, sendto, setgid, setuid, socket, socketpair]\n\n- rule: Unexpected syscall nginx\n  desc: Detect a syscall in a nginx container outside of an expected set\n  condition: nginx_consider_syscalls and not evt.type in (\"<unknown>\", nginx_allowed_syscalls) and app_nginx\n  output: Unexpected syscall in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "Nginx", "version": "1.0.0", "website": "", "keywords": ["web", "loadbalancer"], "description": "# Nginx Falco Rules\n\nNginx is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache.\n\n## Rules\n\n### Unauthorized process opened an outbund connection\n\nDetects if nginx is trying to open an outbound connection\n\n### Unauthorized inbound tcp connection nginx\n\nDetects inbound network connections to nginx on unexpected ports\n\nAllowed ports:\n\n* 80\n* 443\n* 8080\n* 8443\n\n### Unexpected spawned process nginx\n\nDetects an unexpected process spawned in the nginx container\n\nAllowed processes:\n\n* nginx\n* app-entrypoint.\n* basename\n* dirname\n* grep\n* nami\n* node\n* tini\n\n### Unexpected file read or written by nginx\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/log/nginx\n* /var/run\n\n### Unexpected system calls in nginx container\n\nDetects an unexpected system call executed in nginx container\n\nAllowed system calls:\n\n* accept\n* bind\n* clone\n* connect\n* dup\n* listen\n* mkdir\n* open\n* recvfrom\n* recvmsg\n* sendto\n* setgid\n* setuid\n* socket\n* socketpair\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Nginx"}');
INSERT INTO public.latest_security_resources VALUES (42, '{"id": "php-fpm", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/2/27/PHP-logo.svg/1920px-PHP-logo.svg.png", "kind": "FalcoRules", "name": "PHP-FPM", "rules": [{"raw": "- macro: php_fpm_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_php_fpm\n  condition: container and container.image contains \"fpm\"\n\n# Considering any inbound network connection suspect\n- rule: Unexpected inbound connection php_fpm\n  desc: Detect any inbound connection arriving at php_fpm\n  condition: inbound and evt.rawres >= 0 and app_php_fpm\n  output: Unexpected inbound connection arriving at php_fpm (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting listening ports to selected set\n\n- list: php_fpm_allowed_inbound_ports_tcp\n  items: [80, 443]\n\n- rule: Unexpected inbound tcp connection php_fpm\n  desc: Detect inbound traffic to php_fpm using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (php_fpm_allowed_inbound_ports_tcp) and app_php_fpm\n  output: Inbound network connection to php_fpm on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: php_fpm_allowed_processes\n  items: [\"/usr/bin/python2\", \"nginx\", \"nginx: master process /usr/sbin/nginx -g daemon off; error_log /dev/stderr info;\", \"nginx: worker process\", \"php-fpm\", \"php-fpm: pool www\"]\n\n- rule: Unexpected spawned process php_fpm\n  desc: Detect a process started in a php_fpm container outside of an expected set\n  condition: spawned_process and not proc.name in (php_fpm_allowed_processes) and app_php_fpm\n  output: Unexpected process spawned in php_fpm container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: php_fpm_allowed_file_prefixes_readonly\n  items: [\"/dev\", \"/var/www/errors\"]\n\n- rule: Unexpected file access readonly for php_fpm\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (php_fpm_allowed_file_prefixes_readonly) and app_php_fpm\n  output: Unexpected file accessed readonly for php_fpm (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: php_fpm_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\", \"/usr/local/var/log\"]\n\n- rule: Unexpected file access readwrite for php_fpm\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (php_fpm_allowed_file_prefixes_readwrite) and app_php_fpm\n  output: Unexpected file accessed readwrite for php_fpm (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "PHP", "version": "1.0.0", "website": "", "keywords": ["web"], "description": "# PHP-FPM Falco Rules\n\nPHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation with some additional features useful for sites of any size, especially busier sites.\n\nThese features include:\n- Adaptive process spawning\n- Basic statistics (ala Apache''s mod_status)\n- Advanced process management with graceful stop/start\n- Ability to start workers with different uid/gid/chroot/environment and different php.ini (replaces safe_mode)\n- Stdout & stderr logging\n- Emergency restart in case of accidental opcode cache destruction\n- Accelerated upload support\n- Support for a \"slowlog\"\n- Enhancements to FastCGI, such as fastcgi_finish_request() - a special function to finish request & flush all data while continuing to do something time-consuming (video converting, stats processing, etc.)\n\n... and much more.\n\n## Rules\n\n### Unexpected inbound connection php_fpm\n\nDetects any inbound connection arriving at php_fpm\n\n### Unexpected inbound tcp connection php_fpm\n\nDetects inbound traffic to php_fpm using tcp on a port outside of expected set\n\nAllowed inbound ports:\n\n* 80\n* 443\n\n### Unexpected spawned process php_fpm\n\nDetects a process started in a php_fpm container outside of an expected set\n\nAllowed processes:\n\n* /usr/bin/python2\n* nginx\n* nginx: master process /usr/sbin/nginx -g daemon off; error_log /dev/stderr info\n* nginx: worker process\n* php-fpm\n* php-fpm: pool www\n\n### Unexpected file access readonly for php_fpm\n\nDetects an attempt to access a file readonly other than below an expected list of directories\n\nAllowed file prefixes for readonly:\n\n* /dev\n* /var/www/errors\n\n### Unexpected file access readwrite for php_fpm\n\nDetects an attempt to access a file readwrite other than below an expected list of directories\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /tmp\n* /usr/local/var/log\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "Nestor Salceda"}, {"link": "https://github.com/tembleking", "name": "Fede Barcelona"}], "shortDescription": "Falco rules for securing PHP-FPM"}');
INSERT INTO public.latest_security_resources VALUES (43, '{"id": "postgresql", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/540px-Postgresql_elephant.svg.png", "kind": "FalcoRules", "name": "PostgreSQL", "rules": [{"raw": "- macro: postgres_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_postgres\n  condition: container and container.image contains \"postgres\"\n\n- list: postgres_allowed_inbound_ports_tcp\n  items: [5432]\n\n- rule: Unexpected inbound tcp connection postgres\n  desc: Detect inbound traffic to postgres using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (postgres_allowed_inbound_ports_tcp) and app_postgres\n  output: Inbound network connection to postgres on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: postgres_allowed_processes\n  items: [\"/proc/self/exe\", \"pg_isready\", \"postgres\", \"psql\", \"postgres: autovacuum launcher process\", \"pg_ctl\" , \"postgres: checkpointer process   \", \"postgres: stats collector process   \", \"postgres: wal writer process   \", \"postgres: writer process   \", \"sh\"]\n\n- rule: Unexpected spawned process postgres\n  desc: Detect a process started in a postgres container outside of an expected set\n  condition: spawned_process and not proc.name in (postgres_allowed_processes) and app_postgres\n  output: Unexpected process spawned in postgres container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: postgres_allowed_file_prefixes_readonly\n  items: [\"/dev\", \"/etc\", \"/lib/x86_64-linux-gnu\", \"/usr/lib/locale\", \"/usr/lib/x86_64-linux-gnu\", \"/usr/share/locale\", \"/var/lib/postgresql/data\", \"/usr/share/zoneinfo\", \"/var/lib/postgresql\", \"/usr/lib/postgresql\", \"/usr/share/postgresql\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readonly for postgres\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (postgres_allowed_file_prefixes_readonly) and app_postgres\n  output: Unexpected file accessed readonly for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: postgres_allowed_file_prefixes_readwrite\n  items: [\"/var/lib/postgresql/data\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readwrite for postgres\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (postgres_allowed_file_prefixes_readwrite) and app_postgres\n  output: Unexpected file accessed readwrite for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "PostgreSQL", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# PostgreSQL Falco Rules\n\n## Rules\n\n### Unexpected inbound tcp connection postgres\n\nDetects inbound network connections to postgres on unexpected ports\n\nAllowed ports:\n\n* 5432\n\n### Unexpected spawned process postgres\n\nDetects an unexpected process spawned in the postgres container\n\nAllowed processes:\n\n* /proc/self/exe\n* pg_isready\n* postgres\n* psql\n* pg_ctl\n* sh\n\n### Unexpected file read by postgres\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /dev\n* /etc\n* /lib/x86_64-linux-gnu\n* /usr/lib/locale\n* /usr/lib/x86_64-linux-gnu\n* /usr/share/locale\n* /var/lib/postgresql/data\n* /usr/share/zoneinfo\n* /var/lib/postgresql\n* /usr/lib/postgresql\n* /usr/share/postgresql\n* /var/run/postgresql\n\n### Unexpected file written by postgres\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/lib/postgresql/data\n* /var/run/postgresql\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing PostgreSQL"}');
INSERT INTO public.latest_security_resources VALUES (44, '{"id": "redis", "icon": "https://upload.wikimedia.org/wikipedia/en/thumb/6/6b/Redis_Logo.svg/2880px-Redis_Logo.svg.png", "kind": "FalcoRules", "name": "Redis", "rules": [{"raw": "- macro: redis_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_redis\n  condition: container and container.image contains \"redis\"\n\n- list: redis_allowed_inbound_ports_tcp\n  items: [6379]\n\n- rule: Unexpected inbound tcp connection redis\n  desc: Detect inbound traffic to redis using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (redis_allowed_inbound_ports_tcp) and app_redis\n  output: Inbound network connection to redis on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: redis_allowed_processes\n  items: [\"redis-server\", \"app-entrypoint.\", \"basename\", \"dirname\", \"grep\", \"nami\", \"node\", \"redis-cli\", \"tini\", \"run.sh\", \"sed\", \"which\"]\n\n- rule: Unexpected spawned process redis\n  desc: Detect a process started in a redis container outside of an expected set\n  condition: spawned_process and not proc.name in (redis_allowed_processes) and app_redis\n  output: Unexpected process spawned in redis container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: redis_allowed_file_prefixes_readwrite\n  items: [\"/data\", \"/opt\", \"/tmp\"]\n\n- rule: Unexpected file access readwrite for redis\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (redis_allowed_file_prefixes_readwrite) and app_redis\n  output: Unexpected file accessed readwrite for redis (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Redis Labs", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# Redis Falco Rules\n\n## Rules\n\n### Unexpected inbound tcp connection redis\n\nDetects inbound network connections to redis on unexpected ports\n\nAllowed ports:\n\n* 6379\n\n### Unexpected spawned process redis\n\nDetects an unexpected process spawned in the redis container\n\nAllowed processes:\n\n* redis-server\n* app-entrypoint.\n* basename\n* dirname\n* grep\n* nami\n* node\n* redis-cli\n* tini\n* run.sh\n* sed\n* which\n\n### Unexpected file written by redis\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /data\n* /opt\n* /tmp\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Redis"}');
INSERT INTO public.latest_security_resources VALUES (45, '{"id": "rook", "icon": "https://www.pngfind.com/pngs/m/581-5811204_rook-kubernetes-logo-hd-png-download.png", "kind": "FalcoRules", "name": "Rook", "rules": [{"raw": "- macro: rook_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"rook\"\n- macro: app_rook\n  condition: container and container.image contains \"rook\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n\n# Restricting spawned processes to selected set\n\n- list: rook_allowed_processes\n  items: [\"/bin/sh\", \"/sbin/ldconfig.real\", \"/tini\", \"/usr/bin/python2.7\", \"/usr/local/bin/rook\", \"ceph\", \"ldconfig\", \"ldconfig.real\", \"rook\"]\n\n- rule: Unexpected spawned process rook\n  desc: Detect a process started in a rook container outside of an expected set\n  condition: spawned_process and not proc.name in (rook_allowed_processes) and app_rook\n  output: Unexpected process spawned in rook container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: rook_allowed_file_prefixes_readonly\n  items: [\"/\"]\n\n- rule: Unexpected file access readonly for rook\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (rook_allowed_file_prefixes_readonly) and app_rook\n  output: Unexpected file accessed readonly for rook (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: rook_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\"]\n\n- rule: Unexpected file access readwrite for rook\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (rook_allowed_file_prefixes_readwrite) and app_rook\n  output: Unexpected file accessed readwrite for rook (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: rook_allowed_syscalls\n  items: [clone, connect, dup, execve, getegid, geteuid, getgid, getrlimit, getuid, open, openat, pipe, procexit, sendmsg, socket, unlinkat]\n\n- rule: Unexpected syscall rook\n  desc: Detect a syscall in a rook container outside of an expected set\n  condition: rook_consider_syscalls and not evt.type in (\"<unknown>\", rook_allowed_syscalls) and app_rook\n  output: Unexpected syscall in rook container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "Rook", "version": "1.0.0", "website": "", "keywords": ["storage"], "description": "# Rook Falco Rules\n\nRook turns distributed storage systems into self-managing, self-scaling, self-healing storage services. It automates the tasks of a storage administrator: deployment, bootstrapping, configuration, provisioning, scaling, upgrading, migration, disaster recovery, monitoring, and resource management.\n\n## Rules\n\n### Unexpected spawned process Rook\n\nDetects an unexpected process spawned in the rook container\n\nAllowed processes:\n\n* /bin/sh\n* /sbin/ldconfig.real\n* /tini\n* /usr/bin/python2.7\n* /usr/local/bin/rook\n* ceph\n* ldconfig\n* ldconfig.real\n* rook\n\n### Unexpected file read by Rook\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /\n\n### Unexpected file written by Rook\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /tmp\n\n### Unexpected system calls in Rook container\n\nDetects an unexpected system call executed in rook container\n\nAllowed system calls:\n\n* clone\n* connect\n* dup\n* execve\n* getegid\n* geteuid\n* getgid\n* getrlimit\n* getuid\n* open\n* openat\n* pipe\n* procexit\n* sendmsg\n* socket\n* unlinkat\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Rook"}');
INSERT INTO public.latest_security_resources VALUES (46, '{"id": "ssh connections", "icon": "https://upload.wikimedia.org/wikipedia/en/6/65/OpenSSH_logo.png", "kind": "FalcoRules", "name": "SSH connections", "rules": [{"raw": "- rule: Inbound SSH Connection\n  desc: Detect Inbound SSH Connection\n  condition: >\n    (evt.type in (accept,listen) and evt.dir=<) or\n      (evt.type in (recvfrom,recvmsg)) and ssh_port\n  output: >\n    Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)\n  priority: WARN\n  tags: [network]\n- rule: Outbound SSH Connection\n  desc: Detect Outbound SSH Connection\n  condition: >\n    (evt.type = connect and evt.dir=<) or\n      (evt.type in (sendto,sendmsg)) and ssh_port\n  output: >\n    Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)\n  priority: WARN\n  tags: [network]\n"}], "vendor": "Sysdig", "version": "1.0.0", "website": "", "keywords": ["usecase"], "description": "# Detecting SSH connections Falco Rules\n\nA set of rules to detect SSH connections\n\n## Rules\n### Inbound SSH Connection\nDetects inbound SSH connection\n### Outbound SSH Connection\nDetects outbound SSH connection\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for detecting SSH connections"}');
INSERT INTO public.latest_security_resources VALUES (47, '{"id": "traefik", "icon": "https://d33wubrfki0l68.cloudfront.net/1b8ea408142c253bb8e16596218e4e328d019c58/862c3/assets/img/traefik.logo.bright@3x.svg", "kind": "FalcoRules", "name": "Traefik", "rules": [{"raw": "- macro: traefik_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_traefik\n  condition: container and container.image startswith \"traefik\"\n\n# Restricting listening ports to selected set\n\n- list: traefik_allowed_inbound_ports_tcp\n  items: [443, 80, 8080]\n\n- rule: Unexpected inbound tcp connection traefik\n  desc: Detect inbound traffic to traefik using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (traefik_allowed_inbound_ports_tcp) and app_traefik\n  output: Inbound network connection to traefik on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: traefik_allowed_processes\n  items: [\"traefik\"]\n\n- rule: Unexpected spawned process traefik\n  desc: Detect a process started in a traefik container outside of an expected set\n  condition: spawned_process and not proc.name in (traefik_allowed_processes) and app_traefik\n  output: Unexpected process spawned in traefik container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Traefik", "version": "1.0.0", "website": "", "keywords": ["loadbalancer"], "description": "# Traefik Falco Rules\n\nA reverse proxy / load balancer that''s easy, dynamic, automatic, fast, full-featured, open source, production proven, provides metrics, and integrates with every major cluster technology... No wonder it''s so popular!\n\n## Rules\n\n### Unauthorized inbound tcp connection traefik\n\nDetects inbound network connections to traefik on unexpected ports\n\nAllowed ports:\n\n* 443\n* 80\n* 8080\n\n### Unexpected spawned process traefik\n\nDetects an unexpected process spawned in the traefik container\n\nAllowed processes:\n\n* traefik\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Traefik"}');


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: nestor
--

INSERT INTO public.schema_migrations VALUES (1573467085, false);


--
-- Data for Name: security_resources; Type: TABLE DATA; Schema: public; Owner: nestor
--

INSERT INTO public.security_resources VALUES (63, '{"id": "admin activities", "icon": "https://www.sudo.ws/sudo/images/sudo-logo-65.png", "kind": "FalcoRules", "name": "Admin activities", "rules": [{"raw": "- rule: Detect su or sudo\n  desc: detect sudo activities\n  condition:\n    spawned_process and proc.name in (sudo, su)\n  output: >\n    Detected sudo or su privilege escalation activity (user=%user.name command=%proc.cmdline)\n  priority: WARN\n  tags: [process]\n- rule: Package Management Launched\n  desc: detect package management launched\n  condition: >\n    spawned_process and user.name != \"_apt\" and package_mgmt_procs and not package_mgmt_ancestor_procs\n  output: >\n    Package management process launched in container (user=%user.name\n    command=%proc.cmdline container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)\n  priority: ERROR\n  tags: [process]\n"}], "vendor": "Sysdig", "version": "1.0.0", "website": "", "keywords": ["usecase"], "description": "# Detecting admin activities Falco Rules\n\nA set of rules to detect admin activities\n\n## Rules\n### Detect su or sudo\nDetects su or sudo privilege escalation activity\n### Package Management Launched\nDetects when a package management process is launched in a container\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for detecting admin activities"}');
INSERT INTO public.security_resources VALUES (64, '{"id": "apache", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Apache_HTTP_server_logo_%282016%29.svg/300px-Apache_HTTP_server_logo_%282016%29.svg.png", "kind": "FalcoRules", "name": "Apache", "rules": [{"raw": "- macro: apache_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_apache\n  condition: container and container.image contains \"apache\"\n\n# Restricting listening ports to selected set\n\n- list: apache_allowed_inbound_ports_tcp\n  items: [80, 443]\n\n- rule: Unexpected inbound tcp connection apache\n  desc: Detect inbound traffic to apache using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (apache_allowed_inbound_ports_tcp) and app_apache\n  output: Inbound network connection to apache on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: apache_allowed_processes\n  items: [\"apache2\", \"basename\", \"grep\", \"app-entrypoint.\", \"node\", \"sleep\", \"dirname\", \"httpd\", \"nami\", \"sh\", \"tini\"]\n\n- rule: Unexpected spawned process apache\n  desc: Detect a process started in a apache container outside of an expected set\n  condition: spawned_process and not proc.name in (apache_allowed_processes) and app_apache\n  output: Unexpected process spawned in apache container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: apache_allowed_file_prefixes_readwrite\n  items: [\"/opt\", \"/tmp\", \"/dev/null\"]\n\n- rule: Unexpected file access readwrite for apache\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (apache_allowed_file_prefixes_readwrite) and app_apache\n  output: Unexpected file accessed readwrite for apache (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Apache", "version": "1.0.0", "website": "", "keywords": ["web"], "description": "# Apache Falco Rules\nThe Apache HTTP Server, colloquially called Apache (/əˈpætʃi/ ə-PATCH-ee),\nis free and open-source cross-platform web server software, released under the\nterms of Apache License 2.0. Apache is developed and maintained by an open community\nof developers under the auspices of the Apache Software Foundation.\n\n## Rules\n\n### Unexpected inbound TCP connection apache\n\nDetects inbound traffic to apache using tcp on a port outside of expected set\n\nAllowed inbound ports:\n\n* 80\n* 443\n\n### Unexpected spawned process apache\n\nDetects a process started in a apache container outside of an expected set\n\nAllowed processes:\n* apache2\n* basename\n* grep\n* app-entrypoint.\n* node\n* sleep\n* dirname\n* httpd\n* nami\n* sh\n* tini\n\n### Unexpected file access readwrite for apache\n\nDetects an attempt to access a file readwrite other than below an expected list of directories\n\nAllowed file prefixes for readwrite:\n* /opt\n* /tmp\n* /dev/null\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Apache HTTP Server"}');
INSERT INTO public.security_resources VALUES (65, '{"id": "consul", "icon": "https://s3.amazonaws.com/hashicorp-marketing-web-assets/brand/Consul_PrimaryLogo_FullColor.BkqqyRBpl.svg", "kind": "FalcoRules", "name": "Consul", "rules": [{"raw": "- macro: consul_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name contains \"consul\"\n- macro: app_consul\n  condition: container and container.image contains \"consul\"\n\n# Restricting listening ports to selected set\n\n- list: consul_allowed_inbound_ports_tcp\n  items: [8300, 8301, 8302, 8500, 8600]\n\n- rule: Unexpected inbound tcp connection consul\n  desc: Detect inbound traffic to consul using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (consul_allowed_inbound_ports_tcp) and app_consul\n  output: Inbound network connection to consul on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: consul_allowed_processes\n  items: [\"/bin/consul\", \"/bin/sh\", \"/proc/self/exe\", \"awk\", \"consul\", \"ping\", \"seq\", \"sleep\"]\n\n- rule: Unexpected spawned process consul\n  desc: Detect a process started in a consul container outside of an expected set\n  condition: spawned_process and not proc.name in (consul_allowed_processes) and app_consul\n  output: Unexpected process spawned in consul container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Retricting paths for readwrite\n\n- list: consul_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/var/lib/consul\"]\n\n- rule: Unexpected file access readwrite for consul\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (consul_allowed_file_prefixes_readwrite) and app_consul\n  output: Unexpected file accessed readwrite for consul (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: consul_allowed_syscalls\n  items: [accept, bind, clone, connect, dup, execve, fork, listen, mkdirat, open, openat, pipe, procexit, recvfrom, recvmsg, sendto, socket, unlinkat]\n\n- rule: Unexpected syscall consul\n  desc: Detect a syscall in a consul container outside of an expected set\n  condition: consul_consider_syscalls and not evt.type in (\"<unknown>\", consul_allowed_syscalls) and app_consul\n  output: Unexpected syscall in consul container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "HashiCorp", "version": "1.0.0", "website": "", "keywords": ["consul"], "description": "# Consul Falco Rules\n\nConsul is a service networking solution to connect and secure services across any runtime platform and public or private cloud\n\n## Rules\n\n### Unexpected inbound tcp connection consul\n\nDetects inbound network connections to consul on unexpected ports\n\nAllowed inbound ports:\n\n* 8300\n* 8301\n* 8302\n* 8500\n* 8600\n\n### Unexpected spawned process consul\n\nDetects an unexpected process spawned in the consul container\n\nAllowed processes:\n\n* consul\n* sh\n* exe\n* awk\n* consul\n* ping\n* seq\n* sleep\n\n### Unexpected system calls in consul container\n\nDetects an unexpected system call executed in consul container\n\nAllowed system calls:\n\n* accept\n* bind\n* clone\n* connect\n* dup\n* execve\n* fork\n* listen\n* mkdirat\n* open\n* openat\n* pipe\n* procexit\n* recvfrom\n* recvmsg\n* sendto\n* socket\n* unlinkat\n\n### Unexpected file access readwrite for apache\n\nDetects an attempt to access a file readwrite other than below an expected list of directories\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /var/lib/consul\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Consul"}');
INSERT INTO public.security_resources VALUES (66, '{"id": "cve-2019-11246", "icon": "https://cve.mitre.org/images/cvebanner.png", "kind": "FalcoRules", "name": "CVE-2019-11246", "rules": [{"raw": "- macro: safe_kubectl_version\n  condition: (jevt.value[/userAgent] startswith \"kubectl/v1.19\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.18\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.17\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.16\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.15\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.14.3\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.14.2\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.13.7\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.13.6\" or\n              jevt.value[/userAgent] startswith \"kubectl/v1.12.9\")\n\n# CVE-2019-11246\n# Run kubectl version --client and if it does not say client version 1.12.9, 1.13.6, or 1.14.2 or newer,  you are running a vulnerable version.\n- rule: K8s Vulnerable Kubectl Copy\n  desc: Detect any attempt vulnerable kubectl copy in pod\n  condition: kevt_started and pod_subresource and kcreate and\n             ka.target.subresource = \"exec\" and ka.uri.param[command] = \"tar\" and\n             not safe_kubectl_version\n  output: Vulnerable kubectl copy detected (user=%ka.user.name pod=%ka.target.name ns=%ka.target.namespace action=%ka.target.subresource command=%ka.uri.param[command] userAgent=%jevt.value[/userAgent])\n  priority: WARNING\n  source: k8s_audit\n  tags: [k8s]\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["cve"], "description": "# CVE-2019-11246\n\nThe kubectl cp command allows copying files between containers and the user machine.\nTo copy files from a container, Kubernetes runs tar inside the container to create a tar archive, copies it over the network, and kubectl unpacks it on the user''s machine.\nIf the tar binary in the container is malicious, it could run any code and output unexpected, malicious results.\nAn attacker could use this to write files to any path on the user''s machine when kubectl cp is called, limited only by the system permissions of the local user.\nKubernetes affected versions include versions prior to 1.12.9, versions prior to 1.13.6, versions prior to 1.14.2, and versions 1.1, 1.2, 1.4, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.10, 1.11.\n\nYou can read more info about this CVE:\n\n* [CVE-2019-11246 on Mitre](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11246)\n* [How to detect CVE-2019-11246 using Falco](https://sysdig.com/blog/how-to-detect-kubernetes-vulnerability-cve-2019-11246-using-falco/)\n", "maintainers": [{"link": "https://github.com/tembleking", "name": "Fede Barcelona"}], "shortDescription": "Falco rules for detecting CVE-2019-11246"}');
INSERT INTO public.security_resources VALUES (67, '{"id": "cve-2019-14287", "icon": "https://cve.mitre.org/images/cvebanner.png", "kind": "FalcoRules", "name": "CVE-2019-14287", "rules": [{"raw": "- rule: Sudo Potential bypass of Runas user restrictions (CVE-2019-14287)\n  desc: When sudo is configured to allow a user to run commands as an arbitrary user via the ALL keyword in a Runas specification, it is possible to run commands as root by specifying the user ID -1 or 4294967295. This can be used by a user with sufficient sudo privileges to run commands as root even if the Runas specification explicitly disallows root access as long as the ALL keyword is listed first in the Runas specification\n  condition: >\n    spawned_process and\n    proc.name=\"sudo\" and\n    (proc.cmdline contains \"-u#-1\" or proc.cmdline contains \"-u#4294967295\")\n  output: \"Detect sudo exploit (CVE-2019-14287) (user=%user.name command=%proc.cmdline container=%container.info)\"\n  priority: CRITICAL\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["cve"], "description": "# CVE-2019-14287\n\nThe issue exists in the way sudo has implemented running commands with an arbitrary user ID in versions earlier than 1.8.28. The CVSS v3 score is 7.8, so we are talking about a high severity vulnerability, easy to exploit, although the attack vector is local and requires a non-default configuration.\n\nInvoking sudo with -u#-1 or -u#4294967295 specified in the sudo command, the malicious user can run arbitrary commands as root, as long as the sudoers meets the previously described conditions.\n\nIn addition to that, the malicious sudo operation will not log correctly through the syslog facility. It supposed to be logged as root, however, it turned out to be -1 or 4294967295.\n\nYou can read more info about this CVE:\n\n* [CVE-2019-14287 on Mitre](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-14287)\n* [How to detect CVE-2019-14287 using Falco](https://sysdig.com/blog/detecting-cve-2019-14287/)\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}], "shortDescription": "Falco rules for detecting CVE-2019-14287"}');
INSERT INTO public.security_resources VALUES (68, '{"id": "cve-2019-5736", "icon": "https://cve.mitre.org/images/cvebanner.png", "kind": "FalcoRules", "name": "CVE-2019-5736", "rules": [{"raw": "- list: docker_binaries\n  items: [dockerd, containerd-shim, \"runc:[1:CHILD]\"]\n\n- macro: docker_procs\n  condition: proc.name in (docker_binaries)\n\n- rule: Modify container entrypoint (CVE-2019-5736)\n  desc: Detect file write activities on container entrypoint symlink (/proc/self/exe)\n  condition: >\n    open_write and (fd.name=/proc/self/exe or fd.name startswith /proc/self/fd/) and not docker_procs and container\n  output: >\n    %fd.name is open to write by process (%proc.name, %proc.exeline)\n  priority: WARNING\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["cve"], "description": "# CVE-2019-5736\n\nrunC is the underlying container runtime beneath infrastructure such as Docker, CRI-O, containerd, Kubernetes and others. This new vulnerability allows a compromised container to overwrite the host runC binary and gain root-level execution and underlying file access. As a result, an attacker can run any root level command within a container when:\n* Spinning up a new container based on the attacker’s image.\n* Attaching (docker exec) into an existing container which the attacker had previous write access to.\n\nYou can read more info about this CVE:\n\n* [CVE-2019-5736 on Mitre](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5736)\n* [Detecting exploits of CVE-2019-5736: runc container breakout](https://sysdig.com/blog/cve-2019-5736-runc-container-breakout/)\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for detecting CVE-2019-5736"}');
INSERT INTO public.security_resources VALUES (69, '{"id": "elasticsearch", "icon": "https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt05047fdbe3b9c333/5c11ec1f3312ce2e785d9c30/logo-elastic-elasticsearch-lt.svg", "kind": "FalcoRules", "name": "ElasticSearch", "rules": [{"raw": "- macro: elasticsearch_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_elasticsearch\n  condition: container and container.image contains \"elasticsearch\"\n\n# Restricting listening ports to selected set\n\n- list: elasticsearch_allowed_inbound_ports_tcp\n  items: [37125, 37385, 40689, 41503, 44173, 9200, 9300]\n\n- rule: Unexpected inbound tcp connection elasticsearch\n  desc: Detect inbound traffic to elasticsearch using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (elasticsearch_allowed_inbound_ports_tcp) and app_elasticsearch\n  output: Inbound network connection to elasticsearch on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: elasticsearch_allowed_processes\n  items: [\"/bin/bash\", \"/bin/sh\", \"/proc/self/exe\", \"/sbin/ldconfig\", \"/usr/lib/jvm/jre-1.8.0-openjdk/bin/java\", \"/usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_64/bin/controller\", \"chown\", \"controller\", \"cut\", \"dirname\", \"egrep\", \"env\", \"grep\", \"hostname\", \"java\", \"ldconfig\", \"tr\", \"app-entrypoint.\", \"basename\", \"getent\", \"groupadd\", \"nami\", \"node\", \"sysctl\", \"useradd\", \"sleep\", \"elasticsearch\", \"elasticsearch-p\", \"id\", \"ldconfig.real\", \"mktemp\", \"ps\", \"sh\", \"su\", \"tini\"]\n\n- rule: Unexpected spawned process elasticsearch\n  desc: Detect a process started in a elasticsearch container outside of an expected set\n  condition: spawned_process and not proc.name in (elasticsearch_allowed_processes) and app_elasticsearch\n  output: Unexpected process spawned in elasticsearch container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: elasticsearch_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\", \"/usr/share/elasticsearch\", \"/etc\", \"/opt\"]\n\n- rule: Unexpected file access readwrite for elasticsearch\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (elasticsearch_allowed_file_prefixes_readwrite) and app_elasticsearch\n  output: Unexpected file accessed readwrite for elasticsearch (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Elastic", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# ElasticSearch Falco Rules\nElasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected.\n\n## Rules\n\n### Unexpected inbound tcp connection elasticsearch\n\nDetects inbound network connections to elasticsearch on unexpected ports\n\nAllowed ports:\n\n* 37125\n* 37385\n* 40689\n* 41503\n* 44173\n* 9200\n* 9300\n\n### Unexpected spawned process elasticsearch\n\nDetects an unexpected process spawned in the elasticsearch container\n\nAllowed processes:\n\n* /bin/bash\n* /bin/sh\n* /proc/self/exe\n* /sbin/ldconfig\n* /usr/lib/jvm/jre-1.8.0-openjdk/bin/java\n* /usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_64/bin/controller\"\n* chown\n* controller\n* cut\n* dirname\n* egrep\n* env\n* grep\n* hostname\n* java\n* ldconfig\n* tr\n* app-entrypoint\n* basename\n* getent\n* groupadd\n* nami\n* node\n* sysctl\n* useradd\n* sleep\n* elasticsearch\n* elasticsearch-p\n* id\n* ldconfig.real\n* mktemp\n* ps\n* sh\n* su\n* tini\n\n### Unexpected file access readwrite for elasticsearch\n\nDetects an unexpected file accessed in readwrite mode for elasticsearch\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /tmp\n* /usr/share/elasticsearch\n* /etc\n* /opt\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing ElasticSearch"}');
INSERT INTO public.security_resources VALUES (70, '{"id": "etcd", "icon": "https://raw.githubusercontent.com/cncf/artwork/master/projects/etcd/horizontal/color/etcd-horizontal-color.png", "kind": "FalcoRules", "name": "etcd", "rules": [{"raw": "- macro: etcd_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_etcd\n  condition: container and container.image contains \"k8s_etcd\"\n\n# Not considering all inbound networking suspect\n\n- list: etcd_outbound_processes\n  items:\n  - etcd\n\n- rule: Unauthorized process opened an outbound connection (etcd)\n  desc: A etcd process tried to open an outbound connection and is not whitelisted\n  condition: outbound and not proc.name in (etcd_outbound_processes) and app_etcd\n  output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline\n    connection=%fd.name)\n  priority: WARNING\n\n# Restricting listening ports to selected set\n\n- list: etcd_allowed_inbound_ports_tcp\n  items: [2380, 4001, 7001]\n\n- rule: Unexpected inbound tcp connection etcd\n  desc: Detect inbound traffic to etcd using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (etcd_allowed_inbound_ports_tcp) and app_etcd\n  output: Inbound network connection to etcd on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: etcd_allowed_processes\n  items: [\"/usr/local/bin/etcd\"]\n\n- rule: Unexpected spawned process etcd\n  desc: Detect a process started in a etcd container outside of an expected set\n  condition: spawned_process and not proc.name in (etcd_allowed_processes) and app_etcd\n  output: Unexpected process spawned in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: etcd_allowed_file_prefixes_readonly\n  items: [\"/proc/self\", \"/var/etcd/data/member\"]\n\n- rule: Unexpected file access readonly for etcd\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (etcd_allowed_file_prefixes_readonly) and app_etcd\n  output: Unexpected file accessed readonly for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: etcd_allowed_file_prefixes_readwrite\n  items: [\"/var/etcd/data/member\"]\n\n- rule: Unexpected file access readwrite for etcd\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (etcd_allowed_file_prefixes_readwrite) and app_etcd\n  output: Unexpected file accessed readwrite for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: etcd_allowed_syscalls\n  items: [accept, openat, renameat, unlinkat]\n\n- rule: Unexpected syscall etcd\n  desc: Detect a syscall in a etcd container outside of an expected set\n  condition: etcd_consider_syscalls and not evt.type in (\"<unknown>\", etcd_allowed_syscalls) and app_etcd\n  output: Unexpected syscall in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "CoreOS", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# etcd Falco Rules\n\nA distributed, reliable key-value store for the most critical data of a distributed system\n\n## Rules\n\n### Unauthorized process opened an outbund connection\n\nDetects if an unauthorized process is trying to open an outbound connection\n\nAllowed processes:\n\n* etcd\n\n### Unauthorized inbound tcp connection etcd\n\nDetects inbound network connections to etcd on unexpected ports\n\nAllowed inbound ports:\n\n* 2380\n* 4001\n* 7001\n\n### Unexpected spawned process etcd\n\nDetects an unexpected process spawned in the etcd container\n\nAllowed processes:\n\n* /usr/local/bin/etcd\n\n### Unexpected file read by etcd\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /proc/self\n* /var/etcd/data/member\n\n### Unexpected file readwrite by etcd\n\nDetects an attempt to access a file readonly other than below an expected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/etcd/data/member\n\n### Unexpected system calls in etcd container\n\nDetects an unexpected system call executed in etcd container\n\nAllowed system calls:\n\n* accept\n* openat\n* renameat\n* unlinkat\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing etcd"}');
INSERT INTO public.security_resources VALUES (71, '{"id": "file integrity monitoring", "icon": "https://upload.wikimedia.org/wikipedia/commons/6/65/GNOME_Files_icon_2019.svg", "kind": "FalcoRules", "name": "File integrity monitoring", "rules": [{"raw": "- rule: Detect New File\n  desc: detect new file created\n  condition: >\n    evt.type = chmod or evt.type = fchmod\n  output: >\n    File below a known directory opened for writing (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: ERROR\n  tags: [filesystem]\n- rule: Detect New Directory\n  desc: detect new directory created\n  condition: >\n    mkdir\n  output: >\n    File below a known directory opened for writing (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: ERROR\n  tags: [filesystem]\n- rule: Detect File Permission or Ownership Change\n  desc: detect file permission/ownership change\n  condition: >\n    spawned_process and proc.name in (chmod, chown) and proc.args contains \"/tmp/\"\n  output: >\n    File below a known directory has permission or ownership change (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: WARN\n  tags: [filesystem]\n- rule: Detect Directory Change\n  desc: detect directories change\n  condition: >\n    spawned_process and proc.name in (mkdir, rmdir, mvdir, mv)\n  output: >\n    Directory Change in Filesystem (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])\n  priority: WARN\n  tags: [filesystem]\n- rule: Kernel Module Modification\n  desc: detect kernel module change\n  condition: >\n    spawned_process and proc.name in (insmod, modprobe)\n  output: >\n    Kernel Module Change (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)\n  priority: WARN\n  tags: [process]\n- rule: Node Created in Filesystem\n  desc: detect node created in filesystem\n  condition: >\n    spawned_process and proc.name = mknod\n  output: >\n    Node Creation in Filesystem (user=%user.name\n    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)\n  priority: WARN\n  tags: [filesystem]\n- rule: Listen on New Port\n  desc: Detection a new port is listening\n  condition:\n    evt.type = listen\n  output: >\n    A new port is open to listen (port=%fd.sport ip=%fd.sip)\n  priority: WARN\n  tags: [network]\n"}], "vendor": "Sysdig", "version": "1.0.0", "website": "", "keywords": ["FIM"], "description": "# FIM - File integrity monitoring Falco Rules\n\nA set of rules to detect changes in your filesystem\n\n## Rules\n### Detect New File\nDetects when a new file is created\n### Detect New Directory\nDetects when a new directory is created\n### Detect File Permission or Ownership Change\nDetects file permissions or ownership change\n### Detect Directory Change\nDetects directory changes includir mkdir, rmdir, mvdir, mv\n### Kernel Module Modification\nDetects kernel modules changes via modprobe or insmod\n### Node Created in Filesystem\nDetects a node created via mknod\n### Listen on a New Port\nDetects a new port is listening\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for file integrity monitoring"}');
INSERT INTO public.security_resources VALUES (72, '{"id": "fluentd", "icon": "https://raw.githubusercontent.com/fluent/fluentd-docs/master/public/logo/Fluentd_square.png", "kind": "FalcoRules", "name": "FluentD", "rules": [{"raw": "- macro: fluentd_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_fluentd\n  condition: container and container.image contains \"fluentd\"\n\n# Restricting listening ports to selected set\n\n- list: fluentd_allowed_inbound_ports_tcp\n  items: [31337]\n\n- rule: Unexpected inbound tcp connection fluentd\n  desc: Detect inbound traffic to fluentd using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (fluentd_allowed_inbound_ports_tcp) and app_fluentd\n  output: Inbound network connection to fluentd on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: fluentd_allowed_processes\n  items: [\"/bin/sh\", \"/proc/self/exe\", \"/usr/bin/ruby2.1\", \"date\", \"expr\", \"fluentd\", \"grep\", \"run.sh\", \"sed\", \"stat\"]\n\n- rule: Unexpected spawned process fluentd\n  desc: Detect a process started in a fluentd container outside of an expected set\n  condition: spawned_process and not proc.name in (fluentd_allowed_processes) and app_fluentd\n  output: Unexpected process spawned in fluentd container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: fluentd_allowed_file_prefixes_readwrite\n  items: [\"/var/log\"]\n\n- rule: Unexpected file access readwrite for fluentd\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (fluentd_allowed_file_prefixes_readwrite) and app_fluentd\n  output: Unexpected file accessed readwrite for fluentd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Treasure Data", "version": "1.0.0", "website": "", "keywords": ["logging"], "description": "# FluentD Falco Rules\n\nA distributed, reliable key-value store for the most critical data of a distributed system\n\n## Rules\n\n### Unauthorized inbound tcp connection fluentd\n\nDetects inbound network connections to fluentd on unexpected ports\n\nAllowed inbound ports:\n\n* 31337\n\n### Unexpected spawned process fluentd\n\nDetects an unexpected process spawned in the fluentd container\n\nAllowed processes:\n\n* /bin/sh\n* /proc/self/exe\n* /usr/bin/ruby2.1\n* date\n* expr\n* fluentd\n* grep\n* run.sh\n* sed\n* stat\n\n### Unexpected file read or written by fluentd\n\nDetects an attempt to access a file readwrite other than below an expected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/log\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing FluentD"}');
INSERT INTO public.security_resources VALUES (73, '{"id": "gke", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/Google_Cloud_Logo.svg/300px-Google_Cloud_Logo.svg.png", "kind": "FalcoRules", "name": "GKE", "rules": [{"raw": "#\n# Auto-generated set of falco rules for defaultbackend containers\n# Generated at 2018-05-23 14:59:00 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: defaultbackend_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"defaultbackend\"\n- macro: app_defaultbackend\n  condition: container and container.image contains \"defaultbackend\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: defaultbackend_allowed_inbound_ports_tcp\n  items: [8080]\n\n- rule: Unexpected inbound tcp connection defaultbackend\n  desc: Detect inbound traffic to defaultbackend using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (defaultbackend_allowed_inbound_ports_tcp) and app_defaultbackend\n  output: Inbound network connection to defaultbackend on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: defaultbackend_allowed_processes\n  items: [\"/server\"]\n\n- rule: Unexpected spawned process defaultbackend\n  desc: Detect a process started in a defaultbackend container outside of an expected set\n  condition: spawned_process and not proc.name in (defaultbackend_allowed_processes) and app_defaultbackend\n  output: Unexpected process spawned in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n# Restricting syscalls to selected set\n\n- list: defaultbackend_allowed_syscalls\n  items: [accept]\n\n- rule: Unexpected syscall defaultbackend\n  desc: Detect a syscall in a defaultbackend container outside of an expected set\n  condition: defaultbackend_consider_syscalls and not evt.type in (\"<unknown>\", defaultbackend_allowed_syscalls) and app_defaultbackend\n  output: Unexpected syscall in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}, {"raw": "#\n# Auto-generated set of falco rules for event_exporter containers\n# Generated at 2018-05-23 15:00:05 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: event_exporter_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"event_exporter\"\n- macro: app_event_exporter\n  condition: container and container.image startswith \"event_exporter\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: event_exporter_allowed_inbound_ports_tcp\n  items: [80]\n\n- rule: Unexpected inbound tcp connection event_exporter\n  desc: Detect inbound traffic to event_exporter using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (event_exporter_allowed_inbound_ports_tcp) and app_event_exporter\n  output: Inbound network connection to event_exporter on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: event_exporter_allowed_processes\n  items: [\"/event-exporter\"]\n\n- rule: Unexpected spawned process event_exporter\n  desc: Detect a process started in a event_exporter container outside of an expected set\n  condition: spawned_process and not proc.name in (event_exporter_allowed_processes) and app_event_exporter\n  output: Unexpected process spawned in event_exporter container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: event_exporter_allowed_file_prefixes_readonly\n  items: [\"/proc\"]\n\n- rule: Unexpected file access readonly for event_exporter\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (event_exporter_allowed_file_prefixes_readonly) and app_event_exporter\n  output: Unexpected file accessed readonly for event_exporter (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for hyperkube containers\n# Generated at 2018-05-10 04:57:50 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: hyperkube_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"hyperkube\"\n- macro: app_hyperkube\n  condition: container and container.image contains \"hyperkube\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: hyperkube_allowed_inbound_ports_tcp\n  items: [10248, 10249, 10250, 10255, 4194, 443, 8080]\n\n- rule: Unexpected inbound tcp connection hyperkube\n  desc: Detect inbound traffic to hyperkube using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (hyperkube_allowed_inbound_ports_tcp) and app_hyperkube\n  output: Inbound network connection to hyperkube on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: hyperkube_allowed_processes\n  items: [\"/bin/bash\", \"/bin/findmnt\", \"/hyperkube\", \"findmnt\", \"iptables\", \"iptables-restor\", \"iptables-restore\", \"iptables-save\", \"journalctl\", \"nsenter\", \"sleep\"]\n\n- rule: Unexpected spawned process hyperkube\n  desc: Detect a process started in a hyperkube container outside of an expected set\n  condition: spawned_process and not proc.name in (hyperkube_allowed_processes) and app_hyperkube\n  output: Unexpected process spawned in hyperkube container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: hyperkube_allowed_file_prefixes_readonly\n  items: [\"/\"]\n\n- rule: Unexpected file access readonly for hyperkube\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readonly) and app_hyperkube\n  output: Unexpected file accessed readonly for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: hyperkube_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/proc\", \"/var/lib/kubelet/pods\"]\n\n- rule: Unexpected file access readwrite for hyperkube\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readwrite) and app_hyperkube\n  output: Unexpected file accessed readwrite for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for k8s_dns containers\n# Generated at 2018-05-23 15:00:05 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: k8s_dns_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"k8s_dns\"\n- macro: app_k8s_dns\n  condition: container and container.image contains \"k8s_dns\"\n\n# Considering any inbound network connection suspect\n- rule: Unexpected inbound connection k8s_dns\n  desc: Detect any inbound connection arriving at k8s_dns\n  condition: inbound and evt.rawres >= 0 and app_k8s_dns\n  output: Unexpected inbound connection arriving at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Considering any outbound networking suspect\n- rule: Unexpected outbound connection k8s_dns\n  desc: Detect any outbound connection originating from k8s_dns\n  condition: outbound and app_k8s_dns\n  output: Unexpected outbound connection originating at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting listening ports to selected set\n\n- list: k8s_dns_allowed_inbound_ports_tcp\n  items: [53]\n\n- rule: Unexpected inbound tcp connection k8s_dns\n  desc: Detect inbound traffic to k8s_dns using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_tcp) and app_k8s_dns\n  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n- list: k8s_dns_allowed_inbound_ports_udp\n  items: [53]\n\n- rule: Unexpected inbound udp connection k8s_dns\n  desc: Detect inbound traffic to k8s_dns using udp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_udp) and app_k8s_dns\n  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: k8s_dns_allowed_processes\n  items: [\"/dnsmasq-nanny\", \"/usr/sbin/dnsmasq\", \"dnsmasq\"]\n\n- rule: Unexpected spawned process k8s_dns\n  desc: Detect a process started in a k8s_dns container outside of an expected set\n  condition: spawned_process and not proc.name in (k8s_dns_allowed_processes) and app_k8s_dns\n  output: Unexpected process spawned in k8s_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: k8s_dns_allowed_file_prefixes_readonly\n  items: [\"/etc/k8s/dns\"]\n\n- rule: Unexpected file access readonly for k8s_dns\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readonly) and app_k8s_dns\n  output: Unexpected file accessed readonly for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: k8s_dns_allowed_file_prefixes_readwrite\n  items: [\"/dev\"]\n\n- rule: Unexpected file access readwrite for k8s_dns\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readwrite) and app_k8s_dns\n  output: Unexpected file accessed readwrite for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "", "version": "1.0.0", "website": "", "keywords": ["kubernetes", "google"], "description": "# GKE Falco Rules\nGoogle Kubernetes Engine (GKE) is a managed, production-ready environment for deploying containerized applications. It brings our latest innovations in developer productivity, resource efficiency, automated operations, and open source flexibility to accelerate your time to market.\n\nLaunched in 2015, Kubernetes Engine builds on Google''s experience of running services like Gmail and YouTube in containers for over 12 years. Kubernetes Engine allows you to get up and running with Kubernetes in no time, by completely eliminating the need to install, manage, and operate your own Kubernetes clusters.\n\n## Rules\n\n### Unexpected inbound TCP connections\n\nDetects inbound traffic to GKE components on a port outside of expected set\n\nAllowed inbound ports:\n* 8080 TCP (defaultbackend container)\n* 80 TCP (event_exporter container)\n* 10248, 10249, 10250, 10255, 4194, 443, 8080 TCP (hyperkube container)\n* 53 TCP/UDP (k8s_dns container)\n\n### Unexpected spawned processes\n\nDetects a process started in GKE cluster outside of an expected set\n\nAllowed processes:\n* /server (defaultbackend container)\n* /event-exporter (event_exporter container)\n* For hyperkube container:\n  * /bin/bash\n  * /bin/findmnt\n  * /hyperkube\n  * findmnt\n  * iptables\n  * iptables-restore\n  * iptables-save\n  * journalctl\n  * nsenter\n  * sleep\n* For k8s_dns:\n  * /dnsmasq-nanny\n  * /usr/sbin/dnsmasq\n  * dnsmasq\n\n### Unexpected file access\n\nDetects an attempt to access a file other than an expected list of directories\n\n* /event-exporter (event_exporter container)\n* Read-write outside /dev, /proc, /var/lib/kubelet/pods (hyperkube)\n* Read outside /etc/k8s/dns or write outside /dev (k8s_dns)\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/airadier", "name": "airadier"}], "shortDescription": "Falco rules for securing Google Kubernetes Engine"}');
INSERT INTO public.security_resources VALUES (74, '{"id": "haproxy", "icon": "https://www.cncf.io/wp-content/uploads/2018/04/HAProxy-logo.png", "kind": "FalcoRules", "name": "HAProxy", "rules": [{"raw": "- macro: haproxy_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_haproxy\n  condition: container and container.image contains \"haproxy\"\n\n# Restricting listening ports to selected set\n\n- list: haproxy_allowed_inbound_ports_tcp\n  items: [80, 443, 1936]\n\n- rule: Unexpected inbound tcp connection haproxy\n  desc: Detect inbound traffic to haproxy using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (haproxy_allowed_inbound_ports_tcp) and app_haproxy\n  output: Inbound network connection to haproxy on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: haproxy_allowed_processes\n  items: [\"haproxy\"]\n\n- rule: Unexpected spawned process haproxy\n  desc: Detect a process started in a haproxy container outside of an expected set\n  condition: spawned_process and not proc.name in (haproxy_allowed_processes) and app_haproxy\n  output: Unexpected process spawned in haproxy container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: haproxy_allowed_file_prefixes_readonly\n  items: [\"/etc\", \"/lib/x86_64-linux-gnu\", \"/proc/sys/kernel\", \"/sys/devices/system/cpu\", \"/usr/lib/x86_64-linux-gnu\"]\n\n- rule: Unexpected file access readonly for haproxy\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (haproxy_allowed_file_prefixes_readonly) and app_haproxy\n  output: Unexpected file accessed readonly for haproxy (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: haproxy_allowed_file_prefixes_readwrite\n  items: [\"/var/log/haproxy\", \"/var/run\"]\n# Remember to add your haproxy cache path\n\n- rule: Unexpected file access readwrite for haproxy\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (haproxy_allowed_file_prefixes_readwrite) and app_haproxy\n  output: Unexpected file accessed readwrite for haproxy (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "HAProxy", "version": "1.0.0", "website": "", "keywords": ["loadbalancer"], "description": "# HAProxy Falco Rules\n\nHAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world''s most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms.\n\n## Rules\n\n### Unauthorized inbound tcp connection haproxy\n\nDetects inbound network connections to haproxy on unexpected ports\n\nAllowed ports:\n\n* 80\n* 443\n* 1936\n\n### Unexpected spawned process haproxy\n\nDetects an unexpected process spawned in the haproxy container\n\nAllowed processes:\n\n* haproxy\n\n### Unexpected file read by haproxy\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /etc\n* /lib/x86_64-linux-gnu\n* /proc/sys/kernel\n* /sys/devices/system/cpu\n* /usr/lib/x86_64-linux-gnu\n\n### Unexpected file written by haproxy\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/log/haproxy\n* /var/run\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing HAProxy"}');
INSERT INTO public.security_resources VALUES (75, '{"id": "kubernetes", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/300px-Kubernetes_logo_without_workmark.svg.png", "kind": "FalcoRules", "name": "Kubernetes", "rules": [{"raw": "#\n# Auto-generated set of falco rules for kube_apiserver containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_apiserver_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_apiserver\"\n- macro: app_kube_apiserver\n  condition: container and container.image contains \"kube-apiserver\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_apiserver_allowed_inbound_ports_tcp\n  items: [6443]\n\n- rule: Unexpected inbound tcp connection kube_apiserver\n  desc: Detect inbound traffic to kube_apiserver using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_apiserver_allowed_inbound_ports_tcp) and app_kube_apiserver\n  output: Inbound network connection to kube_apiserver on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_apiserver_allowed_processes\n  items: [\"kube-apiserver\"]\n\n- rule: Unexpected spawned process kube_apiserver\n  desc: Detect a process started in a kube_apiserver container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_apiserver_allowed_processes) and app_kube_apiserver\n  output: Unexpected process spawned in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n# Restricting syscalls to selected set\n\n- list: kube_apiserver_allowed_syscalls\n  items: [accept, connect, socket]\n\n- rule: Unexpected syscall kube_apiserver\n  desc: Detect a syscall in a kube_apiserver container outside of an expected set\n  condition: kube_apiserver_consider_syscalls and not evt.type in (\"<unknown>\", kube_apiserver_allowed_syscalls) and app_kube_apiserver\n  output: Unexpected syscall in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_controller containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_controller_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_controller\"\n- macro: app_kube_controller\n  condition: container and container.image contains \"kube-controller\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_controller_allowed_inbound_ports_tcp\n  items: [10252]\n\n- rule: Unexpected inbound tcp connection kube_controller\n  desc: Detect inbound traffic to kube_controller using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_controller_allowed_inbound_ports_tcp) and app_kube_controller\n  output: Inbound network connection to kube_controller on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_controller_allowed_processes\n  items: [\"kube-controller-manager\"]\n\n- rule: Unexpected spawned process kube_controller\n  desc: Detect a process started in a kube_controller container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_controller_allowed_processes) and app_kube_controller\n  output: Unexpected process spawned in kube_controller container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_dashboard containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_dashboard_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_dashboard\"\n- macro: app_kube_dashboard\n  condition: container and container.image contains \"kube-dashboard\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_dashboard_allowed_inbound_ports_tcp\n  items: [8443]\n\n- rule: Unexpected inbound tcp connection kube_dashboard\n  desc: Detect inbound traffic to kube_dashboard using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dashboard_allowed_inbound_ports_tcp) and app_kube_dashboard\n  output: Inbound network connection to kube_dashboard on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_dashboard_allowed_processes\n  items: [\"/dashboard\"]\n\n- rule: Unexpected spawned process kube_dashboard\n  desc: Detect a process started in a kube_dashboard container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_dashboard_allowed_processes) and app_kube_dashboard\n  output: Unexpected process spawned in kube_dashboard container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: kube_dashboard_allowed_file_prefixes_readonly\n  items: [\"/public\"]\n\n- rule: Unexpected file access readonly for kube_dashboard\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (kube_dashboard_allowed_file_prefixes_readonly) and app_kube_dashboard\n  output: Unexpected file accessed readonly for kube_dashboard (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_dns containers\n# Generated at 2018-05-23 08:29:54 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_dns_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_dns\"\n- macro: app_kube_dns\n  condition: container and container.image contains \"kube-dns\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_dns_allowed_inbound_ports_tcp\n  items: [10053, 10055, 8081]\n\n- rule: Unexpected inbound tcp connection kube_dns\n  desc: Detect inbound traffic to kube_dns using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dns_allowed_inbound_ports_tcp) and app_kube_dns\n  output: Inbound network connection to kube_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_dns_allowed_processes\n  items: [\"/kube-dns\"]\n\n- rule: Unexpected spawned process kube_dns\n  desc: Detect a process started in a kube_dns container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_dns_allowed_processes) and app_kube_dns\n  output: Unexpected process spawned in kube_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n"}, {"raw": "#\n# Auto-generated set of falco rules for kube_scheduler containers\n# Generated at 2018-05-23 09:58:49 UTC\n#\n\n# By default, the autogenerated rules include rules that attempt to\n# restrict the set of system calls that can be performed by\n# applications. However, we know that these rules are fairly FP-prone,\n# so they are disabled by default. If you''d like to enable them,\n# either change or override this macro''s condition to \"evt.num >= 0\".\n- macro: kube_scheduler_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"kube_scheduler\"\n- macro: app_kube_scheduler\n  condition: container and container.image contains \"kube-scheduler\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n- list: kube_scheduler_allowed_inbound_ports_tcp\n  items: [10251]\n\n- rule: Unexpected inbound tcp connection kube_scheduler\n  desc: Detect inbound traffic to kube_scheduler using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_scheduler_allowed_inbound_ports_tcp) and app_kube_scheduler\n  output: Inbound network connection to kube_scheduler on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: kube_scheduler_allowed_processes\n  items: [\"kube-scheduler\"]\n\n- rule: Unexpected spawned process kube_scheduler\n  desc: Detect a process started in a kube_scheduler container outside of an expected set\n  condition: spawned_process and not proc.name in (kube_scheduler_allowed_processes) and app_kube_scheduler\n  output: Unexpected process spawned in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n# Restricting syscalls to selected set\n\n- list: kube_scheduler_allowed_syscalls\n  items: [accept]\n\n- rule: Unexpected syscall kube_scheduler\n  desc: Detect a syscall in a kube_scheduler container outside of an expected set\n  condition: kube_scheduler_consider_syscalls and not evt.type in (\"<unknown>\", kube_scheduler_allowed_syscalls) and app_kube_scheduler\n  output: Unexpected syscall in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "Kubernetes", "version": "1.0.0", "website": "", "keywords": ["kubernetes"], "description": "# Kubernetes Falco Rules\nKubernetes (commonly stylized as k8s) is an open-source container-orchestration system for automating application deployment, scaling, and management.\n\n## Rules\n\n### Unexpected inbound TCP connections\n\nDetects inbound traffic to Kubernetes components using tcp on a port outside of expected set\n\nAllowed inbound ports:\n* 6443 (kube-apiserver container)\n* 10252 (kube-controller container)\n* 8443 (kube-dashboard container)\n* 10053, 10055, 8081 (kube-dns container)\n* 10251 (kube-scheduler container)\n\n### Unexpected spawned processes\n\nDetects a process started in a kubernetes cluster outside of an expected set\n\nAllowed processes:\n* kube-apiserver (for kube-apiserver container)\n* kube-controller-manager (for kube-controller container)\n* /dashboard (kube-dashboard container)\n* /kube-dns (kube-dns container)\n* kube-scheduler (kube-scheduler container)\n\n### Unexpected file access readonly\n\nDetects an attempt to access a file readonly other than below an expected list of directories\n\nAllowed file prefixes for readonly:\n* /public\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/airadier", "name": "airadier"}], "shortDescription": "Falco rules for securing Kubernetes clusters"}');
INSERT INTO public.security_resources VALUES (76, '{"id": "mongodb", "icon": "https://upload.wikimedia.org/wikipedia/en/thumb/4/45/MongoDB-Logo.svg/2560px-MongoDB-Logo.svg.png", "kind": "FalcoRules", "name": "MongoDB", "rules": [{"raw": "- macro: mongo_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_mongo\n  condition: container and container.image contains \"mongo\"\n\n# Restricting listening ports to selected set\n\n- list: mongo_allowed_inbound_ports_tcp\n  items: [27017]\n\n- rule: Unexpected inbound tcp connection mongo\n  desc: Detect inbound traffic to mongo using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (mongo_allowed_inbound_ports_tcp) and app_mongo and fd.sockfamily = ip\n  output: Inbound network connection to mongo on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: mongo_allowed_processes\n  items: [\"mongod\", \"mongo\", \"ftdc\", \"WTCheck.tThread\" ,\"app-entrypoint.\", \"basename\", \"dirname\", \"getent\", \"gosu\", \"grep\", \"groupadd\", \"nami\", \"node\", \"run.sh\", \"sed\", \"sh\", \"sleep\", \"tini\", \"useradd\", \"which\"]\n\n- rule: Unexpected spawned process mongo\n  desc: Detect a process started in a mongo container outside of an expected set\n  condition: spawned_process and not proc.name in (mongo_allowed_processes) and app_mongo\n  output: Unexpected process spawned in mongo container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: mongo_allowed_file_prefixes_readwrite\n  items: [\"/data/db\", \"/etc\", \"/opt\", \"/tmp\", \"/root/.nami\"]\n\n- rule: Unexpected file access readwrite for mongo\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (mongo_allowed_file_prefixes_readwrite) and app_mongo\n  output: Unexpected file accessed readwrite for mongo (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "MongoDB", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# MongoDB Falco Rules\nMongoDB is a free and open-source cross-platform document-oriented database program.\nClassified as a NoSQL database program, MongoDB uses JSON-like documents with schemas.\nMongoDB is developed by MongoDB Inc., and is published under a combination of the GNU\nAffero General Public License and the Apache\n\n## Rules\n\n### Unexpected inbound tcp connection mongo\n\nDetects an inbound network connection to mongo on an unexpected port\n\nAllowed ports:\n\n* 27017\n\n### Unexpected spawned process mongo\n\nDetects an unexpected process spawned in the mongo container\n\nAllowed processes:\n\n* mongod\n* mongo\n* ftdc\n* WTCheck.tThread\n* app-entrypoint\n* basename\n* dirname\n* getent\n* gosu\n* grep\n* groupadd\n* nami\n* node\n* run.sh\n* sed\n* sh\n* sleep\n* tini\n* useradd\n* which\n\n### Unexpected file access readwrite for mongo\n\nDetects an unexpected file accessed in readwrite mode for mongo\n\nAllowed file prefixes for readwrite:\n\n* /data/db\n* /etc\n* /opt\n* /tmp\n* /root/.nami\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing MongoDB"}');
INSERT INTO public.security_resources VALUES (77, '{"id": "nginx", "icon": "https://www.nginx.com/wp-content/themes/nginx-theme/assets/img/logo.png", "kind": "FalcoRules", "name": "Nginx", "rules": [{"raw": "- macro: nginx_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_nginx\n  condition: container and container.image contains \"nginx\"\n\n# Any outbound traffic raises a WARNING\n\n- rule: Unauthorized process opened an outbound connection (nginx)\n  desc: A nginx process tried to open an outbound connection and is not whitelisted\n  condition: outbound and evt.rawres >= 0 and app_nginx\n  output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline\n    connection=%fd.name)\n  priority: WARNING\n\n\n# Restricting listening ports to selected set\n\n- list: nginx_allowed_inbound_ports_tcp\n  items: [80, 443, 8080, 8443]\n\n- rule: Unexpected inbound tcp connection nginx\n  desc: Detect inbound traffic to nginx using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (nginx_allowed_inbound_ports_tcp) and app_nginx\n  output: Inbound network connection to nginx on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: nginx_allowed_processes\n  items: [\"nginx\", \"app-entrypoint.\", \"basename\", \"dirname\", \"grep\", \"nami\", \"node\", \"tini\"]\n\n- rule: Unexpected spawned process nginx\n  desc: Detect a process started in a nginx container outside of an expected set\n  condition: spawned_process and not proc.name in (nginx_allowed_processes) and app_nginx\n  output: Unexpected process spawned in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: nginx_allowed_file_prefixes_readwrite\n  items: [\"/var/log/nginx\", \"/var/run\"]\n# Remember to add your nginx cache path\n\n- rule: Unexpected file access readwrite for nginx\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (nginx_allowed_file_prefixes_readwrite) and app_nginx\n  output: Unexpected file accessed readwrite for nginx (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: nginx_allowed_syscalls\n  items: [accept, bind, clone, connect, dup, listen, mkdir, open, recvfrom, recvmsg, sendto, setgid, setuid, socket, socketpair]\n\n- rule: Unexpected syscall nginx\n  desc: Detect a syscall in a nginx container outside of an expected set\n  condition: nginx_consider_syscalls and not evt.type in (\"<unknown>\", nginx_allowed_syscalls) and app_nginx\n  output: Unexpected syscall in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "Nginx", "version": "1.0.0", "website": "", "keywords": ["web", "loadbalancer"], "description": "# Nginx Falco Rules\n\nNginx is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache.\n\n## Rules\n\n### Unauthorized process opened an outbund connection\n\nDetects if nginx is trying to open an outbound connection\n\n### Unauthorized inbound tcp connection nginx\n\nDetects inbound network connections to nginx on unexpected ports\n\nAllowed ports:\n\n* 80\n* 443\n* 8080\n* 8443\n\n### Unexpected spawned process nginx\n\nDetects an unexpected process spawned in the nginx container\n\nAllowed processes:\n\n* nginx\n* app-entrypoint.\n* basename\n* dirname\n* grep\n* nami\n* node\n* tini\n\n### Unexpected file read or written by nginx\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/log/nginx\n* /var/run\n\n### Unexpected system calls in nginx container\n\nDetects an unexpected system call executed in nginx container\n\nAllowed system calls:\n\n* accept\n* bind\n* clone\n* connect\n* dup\n* listen\n* mkdir\n* open\n* recvfrom\n* recvmsg\n* sendto\n* setgid\n* setuid\n* socket\n* socketpair\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Nginx"}');
INSERT INTO public.security_resources VALUES (78, '{"id": "php-fpm", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/2/27/PHP-logo.svg/1920px-PHP-logo.svg.png", "kind": "FalcoRules", "name": "PHP-FPM", "rules": [{"raw": "- macro: php_fpm_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_php_fpm\n  condition: container and container.image contains \"fpm\"\n\n# Considering any inbound network connection suspect\n- rule: Unexpected inbound connection php_fpm\n  desc: Detect any inbound connection arriving at php_fpm\n  condition: inbound and evt.rawres >= 0 and app_php_fpm\n  output: Unexpected inbound connection arriving at php_fpm (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting listening ports to selected set\n\n- list: php_fpm_allowed_inbound_ports_tcp\n  items: [80, 443]\n\n- rule: Unexpected inbound tcp connection php_fpm\n  desc: Detect inbound traffic to php_fpm using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (php_fpm_allowed_inbound_ports_tcp) and app_php_fpm\n  output: Inbound network connection to php_fpm on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: php_fpm_allowed_processes\n  items: [\"/usr/bin/python2\", \"nginx\", \"nginx: master process /usr/sbin/nginx -g daemon off; error_log /dev/stderr info;\", \"nginx: worker process\", \"php-fpm\", \"php-fpm: pool www\"]\n\n- rule: Unexpected spawned process php_fpm\n  desc: Detect a process started in a php_fpm container outside of an expected set\n  condition: spawned_process and not proc.name in (php_fpm_allowed_processes) and app_php_fpm\n  output: Unexpected process spawned in php_fpm container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: php_fpm_allowed_file_prefixes_readonly\n  items: [\"/dev\", \"/var/www/errors\"]\n\n- rule: Unexpected file access readonly for php_fpm\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (php_fpm_allowed_file_prefixes_readonly) and app_php_fpm\n  output: Unexpected file accessed readonly for php_fpm (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: php_fpm_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\", \"/usr/local/var/log\"]\n\n- rule: Unexpected file access readwrite for php_fpm\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (php_fpm_allowed_file_prefixes_readwrite) and app_php_fpm\n  output: Unexpected file accessed readwrite for php_fpm (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "PHP", "version": "1.0.0", "website": "", "keywords": ["web"], "description": "# PHP-FPM Falco Rules\n\nPHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation with some additional features useful for sites of any size, especially busier sites.\n\nThese features include:\n- Adaptive process spawning\n- Basic statistics (ala Apache''s mod_status)\n- Advanced process management with graceful stop/start\n- Ability to start workers with different uid/gid/chroot/environment and different php.ini (replaces safe_mode)\n- Stdout & stderr logging\n- Emergency restart in case of accidental opcode cache destruction\n- Accelerated upload support\n- Support for a \"slowlog\"\n- Enhancements to FastCGI, such as fastcgi_finish_request() - a special function to finish request & flush all data while continuing to do something time-consuming (video converting, stats processing, etc.)\n\n... and much more.\n\n## Rules\n\n### Unexpected inbound connection php_fpm\n\nDetects any inbound connection arriving at php_fpm\n\n### Unexpected inbound tcp connection php_fpm\n\nDetects inbound traffic to php_fpm using tcp on a port outside of expected set\n\nAllowed inbound ports:\n\n* 80\n* 443\n\n### Unexpected spawned process php_fpm\n\nDetects a process started in a php_fpm container outside of an expected set\n\nAllowed processes:\n\n* /usr/bin/python2\n* nginx\n* nginx: master process /usr/sbin/nginx -g daemon off; error_log /dev/stderr info\n* nginx: worker process\n* php-fpm\n* php-fpm: pool www\n\n### Unexpected file access readonly for php_fpm\n\nDetects an attempt to access a file readonly other than below an expected list of directories\n\nAllowed file prefixes for readonly:\n\n* /dev\n* /var/www/errors\n\n### Unexpected file access readwrite for php_fpm\n\nDetects an attempt to access a file readwrite other than below an expected list of directories\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /tmp\n* /usr/local/var/log\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "Nestor Salceda"}, {"link": "https://github.com/tembleking", "name": "Fede Barcelona"}], "shortDescription": "Falco rules for securing PHP-FPM"}');
INSERT INTO public.security_resources VALUES (79, '{"id": "postgresql", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/540px-Postgresql_elephant.svg.png", "kind": "FalcoRules", "name": "PostgreSQL", "rules": [{"raw": "- macro: postgres_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_postgres\n  condition: container and container.image contains \"postgres\"\n\n- list: postgres_allowed_inbound_ports_tcp\n  items: [5432]\n\n- rule: Unexpected inbound tcp connection postgres\n  desc: Detect inbound traffic to postgres using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (postgres_allowed_inbound_ports_tcp) and app_postgres\n  output: Inbound network connection to postgres on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: postgres_allowed_processes\n  items: [\"/proc/self/exe\", \"pg_isready\", \"postgres\", \"psql\", \"postgres: autovacuum launcher process\", \"pg_ctl\" , \"postgres: checkpointer process   \", \"postgres: stats collector process   \", \"postgres: wal writer process   \", \"postgres: writer process   \", \"sh\"]\n\n- rule: Unexpected spawned process postgres\n  desc: Detect a process started in a postgres container outside of an expected set\n  condition: spawned_process and not proc.name in (postgres_allowed_processes) and app_postgres\n  output: Unexpected process spawned in postgres container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: postgres_allowed_file_prefixes_readonly\n  items: [\"/dev\", \"/etc\", \"/lib/x86_64-linux-gnu\", \"/usr/lib/locale\", \"/usr/lib/x86_64-linux-gnu\", \"/usr/share/locale\", \"/var/lib/postgresql/data\", \"/usr/share/zoneinfo\", \"/var/lib/postgresql\", \"/usr/lib/postgresql\", \"/usr/share/postgresql\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readonly for postgres\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (postgres_allowed_file_prefixes_readonly) and app_postgres\n  output: Unexpected file accessed readonly for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: postgres_allowed_file_prefixes_readwrite\n  items: [\"/var/lib/postgresql/data\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readwrite for postgres\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (postgres_allowed_file_prefixes_readwrite) and app_postgres\n  output: Unexpected file accessed readwrite for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "PostgreSQL", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# PostgreSQL Falco Rules\n\n## Rules\n\n### Unexpected inbound tcp connection postgres\n\nDetects inbound network connections to postgres on unexpected ports\n\nAllowed ports:\n\n* 5432\n\n### Unexpected spawned process postgres\n\nDetects an unexpected process spawned in the postgres container\n\nAllowed processes:\n\n* /proc/self/exe\n* pg_isready\n* postgres\n* psql\n* pg_ctl\n* sh\n\n### Unexpected file read by postgres\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /dev\n* /etc\n* /lib/x86_64-linux-gnu\n* /usr/lib/locale\n* /usr/lib/x86_64-linux-gnu\n* /usr/share/locale\n* /var/lib/postgresql/data\n* /usr/share/zoneinfo\n* /var/lib/postgresql\n* /usr/lib/postgresql\n* /usr/share/postgresql\n* /var/run/postgresql\n\n### Unexpected file written by postgres\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /var/lib/postgresql/data\n* /var/run/postgresql\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing PostgreSQL"}');
INSERT INTO public.security_resources VALUES (80, '{"id": "redis", "icon": "https://upload.wikimedia.org/wikipedia/en/thumb/6/6b/Redis_Logo.svg/2880px-Redis_Logo.svg.png", "kind": "FalcoRules", "name": "Redis", "rules": [{"raw": "- macro: redis_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_redis\n  condition: container and container.image contains \"redis\"\n\n- list: redis_allowed_inbound_ports_tcp\n  items: [6379]\n\n- rule: Unexpected inbound tcp connection redis\n  desc: Detect inbound traffic to redis using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (redis_allowed_inbound_ports_tcp) and app_redis\n  output: Inbound network connection to redis on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: redis_allowed_processes\n  items: [\"redis-server\", \"app-entrypoint.\", \"basename\", \"dirname\", \"grep\", \"nami\", \"node\", \"redis-cli\", \"tini\", \"run.sh\", \"sed\", \"which\"]\n\n- rule: Unexpected spawned process redis\n  desc: Detect a process started in a redis container outside of an expected set\n  condition: spawned_process and not proc.name in (redis_allowed_processes) and app_redis\n  output: Unexpected process spawned in redis container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: redis_allowed_file_prefixes_readwrite\n  items: [\"/data\", \"/opt\", \"/tmp\"]\n\n- rule: Unexpected file access readwrite for redis\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (redis_allowed_file_prefixes_readwrite) and app_redis\n  output: Unexpected file accessed readwrite for redis (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Redis Labs", "version": "1.0.0", "website": "", "keywords": ["database"], "description": "# Redis Falco Rules\n\n## Rules\n\n### Unexpected inbound tcp connection redis\n\nDetects inbound network connections to redis on unexpected ports\n\nAllowed ports:\n\n* 6379\n\n### Unexpected spawned process redis\n\nDetects an unexpected process spawned in the redis container\n\nAllowed processes:\n\n* redis-server\n* app-entrypoint.\n* basename\n* dirname\n* grep\n* nami\n* node\n* redis-cli\n* tini\n* run.sh\n* sed\n* which\n\n### Unexpected file written by redis\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /data\n* /opt\n* /tmp\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Redis"}');
INSERT INTO public.security_resources VALUES (81, '{"id": "rook", "icon": "https://www.pngfind.com/pngs/m/581-5811204_rook-kubernetes-logo-hd-png-download.png", "kind": "FalcoRules", "name": "Rook", "rules": [{"raw": "- macro: rook_consider_syscalls\n  condition: (evt.num < 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"rook\"\n- macro: app_rook\n  condition: container and container.image contains \"rook\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n\n# Restricting spawned processes to selected set\n\n- list: rook_allowed_processes\n  items: [\"/bin/sh\", \"/sbin/ldconfig.real\", \"/tini\", \"/usr/bin/python2.7\", \"/usr/local/bin/rook\", \"ceph\", \"ldconfig\", \"ldconfig.real\", \"rook\"]\n\n- rule: Unexpected spawned process rook\n  desc: Detect a process started in a rook container outside of an expected set\n  condition: spawned_process and not proc.name in (rook_allowed_processes) and app_rook\n  output: Unexpected process spawned in rook container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: rook_allowed_file_prefixes_readonly\n  items: [\"/\"]\n\n- rule: Unexpected file access readonly for rook\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (rook_allowed_file_prefixes_readonly) and app_rook\n  output: Unexpected file accessed readonly for rook (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: rook_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\"]\n\n- rule: Unexpected file access readwrite for rook\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (rook_allowed_file_prefixes_readwrite) and app_rook\n  output: Unexpected file accessed readwrite for rook (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: rook_allowed_syscalls\n  items: [clone, connect, dup, execve, getegid, geteuid, getgid, getrlimit, getuid, open, openat, pipe, procexit, sendmsg, socket, unlinkat]\n\n- rule: Unexpected syscall rook\n  desc: Detect a syscall in a rook container outside of an expected set\n  condition: rook_consider_syscalls and not evt.type in (\"<unknown>\", rook_allowed_syscalls) and app_rook\n  output: Unexpected syscall in rook container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"}], "vendor": "Rook", "version": "1.0.0", "website": "", "keywords": ["storage"], "description": "# Rook Falco Rules\n\nRook turns distributed storage systems into self-managing, self-scaling, self-healing storage services. It automates the tasks of a storage administrator: deployment, bootstrapping, configuration, provisioning, scaling, upgrading, migration, disaster recovery, monitoring, and resource management.\n\n## Rules\n\n### Unexpected spawned process Rook\n\nDetects an unexpected process spawned in the rook container\n\nAllowed processes:\n\n* /bin/sh\n* /sbin/ldconfig.real\n* /tini\n* /usr/bin/python2.7\n* /usr/local/bin/rook\n* ceph\n* ldconfig\n* ldconfig.real\n* rook\n\n### Unexpected file read by Rook\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\nAllowed file prefixes for readonly:\n\n* /\n\n### Unexpected file written by Rook\n\nDetects an attempt to access a file readwrite other than below an espected list of paths\n\nAllowed file prefixes for readwrite:\n\n* /dev\n* /tmp\n\n### Unexpected system calls in Rook container\n\nDetects an unexpected system call executed in rook container\n\nAllowed system calls:\n\n* clone\n* connect\n* dup\n* execve\n* getegid\n* geteuid\n* getgid\n* getrlimit\n* getuid\n* open\n* openat\n* pipe\n* procexit\n* sendmsg\n* socket\n* unlinkat\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Rook"}');
INSERT INTO public.security_resources VALUES (82, '{"id": "ssh connections", "icon": "https://upload.wikimedia.org/wikipedia/en/6/65/OpenSSH_logo.png", "kind": "FalcoRules", "name": "SSH connections", "rules": [{"raw": "- rule: Inbound SSH Connection\n  desc: Detect Inbound SSH Connection\n  condition: >\n    (evt.type in (accept,listen) and evt.dir=<) or\n      (evt.type in (recvfrom,recvmsg)) and ssh_port\n  output: >\n    Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)\n  priority: WARN\n  tags: [network]\n- rule: Outbound SSH Connection\n  desc: Detect Outbound SSH Connection\n  condition: >\n    (evt.type = connect and evt.dir=<) or\n      (evt.type in (sendto,sendmsg)) and ssh_port\n  output: >\n    Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)\n  priority: WARN\n  tags: [network]\n"}], "vendor": "Sysdig", "version": "1.0.0", "website": "", "keywords": ["usecase"], "description": "# Detecting SSH connections Falco Rules\n\nA set of rules to detect SSH connections\n\n## Rules\n### Inbound SSH Connection\nDetects inbound SSH connection\n### Outbound SSH Connection\nDetects outbound SSH connection\n", "maintainers": [{"link": "https://github.com/bencer", "name": "bencer"}], "shortDescription": "Falco rules for detecting SSH connections"}');
INSERT INTO public.security_resources VALUES (83, '{"id": "traefik", "icon": "https://d33wubrfki0l68.cloudfront.net/1b8ea408142c253bb8e16596218e4e328d019c58/862c3/assets/img/traefik.logo.bright@3x.svg", "kind": "FalcoRules", "name": "Traefik", "rules": [{"raw": "- macro: traefik_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_traefik\n  condition: container and container.image startswith \"traefik\"\n\n# Restricting listening ports to selected set\n\n- list: traefik_allowed_inbound_ports_tcp\n  items: [443, 80, 8080]\n\n- rule: Unexpected inbound tcp connection traefik\n  desc: Detect inbound traffic to traefik using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (traefik_allowed_inbound_ports_tcp) and app_traefik\n  output: Inbound network connection to traefik on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: traefik_allowed_processes\n  items: [\"traefik\"]\n\n- rule: Unexpected spawned process traefik\n  desc: Detect a process started in a traefik container outside of an expected set\n  condition: spawned_process and not proc.name in (traefik_allowed_processes) and app_traefik\n  output: Unexpected process spawned in traefik container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n"}], "vendor": "Traefik", "version": "1.0.0", "website": "", "keywords": ["loadbalancer"], "description": "# Traefik Falco Rules\n\nA reverse proxy / load balancer that''s easy, dynamic, automatic, fast, full-featured, open source, production proven, provides metrics, and integrates with every major cluster technology... No wonder it''s so popular!\n\n## Rules\n\n### Unauthorized inbound tcp connection traefik\n\nDetects inbound network connections to traefik on unexpected ports\n\nAllowed ports:\n\n* 443\n* 80\n* 8080\n\n### Unexpected spawned process traefik\n\nDetects an unexpected process spawned in the traefik container\n\nAllowed processes:\n\n* traefik\n", "maintainers": [{"link": "https://github.com/nestorsalceda", "name": "nestorsalceda"}, {"link": "https://github.com/tembleking", "name": "fedebarcelona"}], "shortDescription": "Falco rules for securing Traefik"}');


--
-- Data for Name: vendors; Type: TABLE DATA; Schema: public; Owner: nestor
--

INSERT INTO public.vendors VALUES (27, '{"id": "apache", "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Apache_HTTP_server_logo_%282016%29.svg/2880px-Apache_HTTP_server_logo_%282016%29.svg.png", "kind": "Vendor", "name": "Apache", "website": "https://apache.org/", "description": "# Apache HTTP Server\n\nThe Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows.\n\nThe goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards.\n\nThe Apache HTTP Server (\"httpd\") was launched in 1995 and it has been the most popular web server on the Internet since April 1996. It has celebrated its 20th birthday as a project in February 2015.\n"}');
INSERT INTO public.vendors VALUES (28, '{"id": "coreos", "icon": "https://coreos.com/assets/images/brand/coreos-wordmark-horiz-color.svg", "kind": "Vendor", "name": "CoreOS", "website": "https://coreos.com/", "description": "# CoreOS\n\nCoreOS is a company that offers open-source applications and the Container Linux OS based on the Linux kernel and designing for providing infrastructure to clustered deployments, while focusing on automation, security and scalability.\n\nThey maintain applications like Operator frameworks, rkt, etcd, Clair, flannel, Quay, Tectonic...\n"}');
INSERT INTO public.vendors VALUES (29, '{"id": "elastic", "icon": "https://upload.wikimedia.org/wikipedia/en/3/3b/Elastic_NV_logo.png", "kind": "Vendor", "name": "Elastic", "website": "https://www.elastic.co/", "description": "# Elastic\n\nElastic is a company founded in 2012 in Amsterdam, the Netherlands, previously known as Elasticsearch.\n\nThey build self-managed and SaaS offerings for search, logging, security and analytics use cases.\nThey offer solutions like Elasticsearch, Kibana, Beats and Logstash, previously known as the ELK Stack,\nwith free and paid proprietary features.\n\nTheir opensource search technology is used by eBay, Wikipedia, Yelp Uber, Lyft, Tinder and Netflix.\n\nElastic is also implemented in use cases such as application search, site search, enterprise search, logging,\ninfrastructure monitoring, aplication performance management, security analytics and business analytics.\n"}');
INSERT INTO public.vendors VALUES (30, '{"id": "haproxy", "icon": "http://www.haproxy.org/img/HAProxyCommunityEdition_60px.png", "kind": "Vendor", "name": "HAProxy", "website": "http://www.haproxy.org/", "description": "# HAProxy\n\nHAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. \n\nIt is particularly suited for very high traffic web sites and powers quite a number of the world''s most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms.\n"}');
INSERT INTO public.vendors VALUES (31, '{"id": "hashicorp", "icon": "https://upload.wikimedia.org/wikipedia/commons/8/80/HashiCorp_Logo_no_text.png", "kind": "Vendor", "name": "HashiCorp", "website": "https://www.hashicorp.com/", "description": "# HashiCorp\n\nHashiCorp is a software company with a Freemium business model based in San Francisco, California. \n\nHashiCorp provides open-source tools and commercial products that enable developers, operators and security professionals to provision, secure, run and connect cloud-computing infrastructure.\nIt was founded in 2012 by Mitchell Hashimoto and Armon Dadgar. \n\nHashiCorp offers both opensource and proprietary products.\n"}');


--
-- Name: latest_security_resources_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nestor
--

SELECT pg_catalog.setval('public.latest_security_resources_id_seq', 47, true);


--
-- Name: security_resources_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nestor
--

SELECT pg_catalog.setval('public.security_resources_id_seq', 83, true);


--
-- Name: vendors_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nestor
--

SELECT pg_catalog.setval('public.vendors_id_seq', 31, true);


--
-- PostgreSQL database dump complete
--

